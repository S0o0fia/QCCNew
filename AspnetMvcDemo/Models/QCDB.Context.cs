//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AspnetMvcDemo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QCEntities : DbContext
    {
        public QCEntities()
            : base("name=QCEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_ConClsCustomProperties> C_ConClsCustomProperties { get; set; }
        public virtual DbSet<C_ConClsPropertyMulti> C_ConClsPropertyMulti { get; set; }
        public virtual DbSet<C_ConClsPropertyThirtyValues> C_ConClsPropertyThirtyValues { get; set; }
        public virtual DbSet<AsphaltType> AsphaltTypes { get; set; }
        public virtual DbSet<aspnet_Applications> aspnet_Applications { get; set; }
        public virtual DbSet<aspnet_Membership> aspnet_Membership { get; set; }
        public virtual DbSet<aspnet_Paths> aspnet_Paths { get; set; }
        public virtual DbSet<aspnet_PersonalizationAllUsers> aspnet_PersonalizationAllUsers { get; set; }
        public virtual DbSet<aspnet_PersonalizationPerUser> aspnet_PersonalizationPerUser { get; set; }
        public virtual DbSet<aspnet_Profile> aspnet_Profile { get; set; }
        public virtual DbSet<aspnet_Roles> aspnet_Roles { get; set; }
        public virtual DbSet<aspnet_SchemaVersions> aspnet_SchemaVersions { get; set; }
        public virtual DbSet<aspnet_Users> aspnet_Users { get; set; }
        public virtual DbSet<aspnet_WebEvent_Events> aspnet_WebEvent_Events { get; set; }
        public virtual DbSet<Branch> Branches { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Compaction> Compactions { get; set; }
        public virtual DbSet<ConClsCategory> ConClsCategories { get; set; }
        public virtual DbSet<ConClsClassificationText> ConClsClassificationTexts { get; set; }
        public virtual DbSet<ConClsEvalPerformControl> ConClsEvalPerformControls { get; set; }
        public virtual DbSet<ConClsLabAdditionalTool> ConClsLabAdditionalTools { get; set; }
        public virtual DbSet<ConClsLabAdmixture> ConClsLabAdmixtures { get; set; }
        public virtual DbSet<ConClsLabEquipment> ConClsLabEquipments { get; set; }
        public virtual DbSet<ConClsLabProperty> ConClsLabProperties { get; set; }
        public virtual DbSet<ConClsLabPropertyValue> ConClsLabPropertyValues { get; set; }
        public virtual DbSet<ConClsLabStuff> ConClsLabStuffs { get; set; }
        public virtual DbSet<ConClsLabTestPractice> ConClsLabTestPractices { get; set; }
        public virtual DbSet<ConClsMaterialSupCategory> ConClsMaterialSupCategories { get; set; }
        public virtual DbSet<ConClsMaterialSup> ConClsMaterialSups { get; set; }
        public virtual DbSet<ConClsMixDesign> ConClsMixDesigns { get; set; }
        public virtual DbSet<ConClsMixer> ConClsMixers { get; set; }
        public virtual DbSet<ConClsPeriodicLabProperty> ConClsPeriodicLabProperties { get; set; }
        public virtual DbSet<ConClsProperty> ConClsProperties { get; set; }
        public virtual DbSet<ConClsPropertiesReason> ConClsPropertiesReasons { get; set; }
        public virtual DbSet<ConClsPropertyValue> ConClsPropertyValues { get; set; }
        public virtual DbSet<ConClsPropPeriodic> ConClsPropPeriodics { get; set; }
        public virtual DbSet<ConcreteSample> ConcreteSamples { get; set; }
        public virtual DbSet<ContAsphaltSample> ContAsphaltSamples { get; set; }
        public virtual DbSet<ContractorRetFlow> ContractorRetFlows { get; set; }
        public virtual DbSet<ContSoilSample> ContSoilSamples { get; set; }
        public virtual DbSet<Factory> Factories { get; set; }
        public virtual DbSet<FactoryEquipment> FactoryEquipments { get; set; }
        public virtual DbSet<Factory1> Factorys { get; set; }
        public virtual DbSet<GeneralSampleType> GeneralSampleTypes { get; set; }
        public virtual DbSet<MapRole> MapRoles { get; set; }
        public virtual DbSet<MapUserProject> MapUserProjects { get; set; }
        public virtual DbSet<MapUserRole> MapUserRoles { get; set; }
        public virtual DbSet<MapUser> MapUsers { get; set; }
        public virtual DbSet<MarshalAsphaltSpec> MarshalAsphaltSpecs { get; set; }
        public virtual DbSet<MarshalAspMixDesApp> MarshalAspMixDesApps { get; set; }
        public virtual DbSet<MarshalMixDesign> MarshalMixDesigns { get; set; }
        public virtual DbSet<MarshalSampleResult> MarshalSampleResults { get; set; }
        public virtual DbSet<MarshalSample> MarshalSamples { get; set; }
        public virtual DbSet<PermitLocationTest> PermitLocationTests { get; set; }
        public virtual DbSet<Permit> Permits { get; set; }
        public virtual DbSet<PermitVisionTestDetail> PermitVisionTestDetails { get; set; }
        public virtual DbSet<PermitVisionTest> PermitVisionTests { get; set; }
        public virtual DbSet<PlantLocation> PlantLocations { get; set; }
        public virtual DbSet<Plant> Plants { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<QCWorkFlow> QCWorkFlows { get; set; }
        public virtual DbSet<SamplesWorkFlow> SamplesWorkFlows { get; set; }
        public virtual DbSet<SoilDesign> SoilDesigns { get; set; }
        public virtual DbSet<SoilMoisture> SoilMoistures { get; set; }
        public virtual DbSet<SoilResult> SoilResults { get; set; }
        public virtual DbSet<SoilSampleResult> SoilSampleResults { get; set; }
        public virtual DbSet<SoilSample> SoilSamples { get; set; }
        public virtual DbSet<SoilType> SoilTypes { get; set; }
        public virtual DbSet<SuperPaveMixDesign> SuperPaveMixDesigns { get; set; }
        public virtual DbSet<SuperPaveSampleResult> SuperPaveSampleResults { get; set; }
        public virtual DbSet<SuperPaveSample> SuperPaveSamples { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<ConcreteInspectorLogError> ConcreteInspectorLogErrors { get; set; }
        public virtual DbSet<ConcreteSamplesWorkFlow> ConcreteSamplesWorkFlows { get; set; }
        public virtual DbSet<ConcreteTestSample> ConcreteTestSamples { get; set; }
        public virtual DbSet<QcAsphaltFieldsTest> QcAsphaltFieldsTests { get; set; }
        public virtual DbSet<QcMCFieldsTest> QcMCFieldsTests { get; set; }
        public virtual DbSet<QcPermitMasterFieldsTest> QcPermitMasterFieldsTests { get; set; }
        public virtual DbSet<QcRCFieldsTest> QcRCFieldsTests { get; set; }
        public virtual DbSet<QcSoilFieldsTest> QcSoilFieldsTests { get; set; }
        public virtual DbSet<FactoryDoc> FactoryDocs { get; set; }
        public virtual DbSet<UserRole> UserRoles { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<VisitDetail> VisitDetails { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Factory11> Factory11 { get; set; }
        public virtual DbSet<MaterialResultsPdf> MaterialResultsPdfs { get; set; }
        public virtual DbSet<ConcreteMixingDesign> ConcreteMixingDesigns { get; set; }
        public virtual DbSet<TestsMixingDesign> TestsMixingDesigns { get; set; }
        public virtual DbSet<MixingDesignTest> MixingDesignTests { get; set; }
        public virtual DbSet<ConcretePath> ConcretePaths { get; set; }
        public virtual DbSet<ConcreteTest> ConcreteTests { get; set; }
        public virtual DbSet<BringMaterialVisit> BringMaterialVisits { get; set; }
        public virtual DbSet<Infraction> Infractions { get; set; }
        public virtual DbSet<MaterialforBringVisit> MaterialforBringVisits { get; set; }
        public virtual DbSet<PressureResistanceTestforFactorySample> PressureResistanceTestforFactorySamples { get; set; }
        public virtual DbSet<SampleCubePath> SampleCubePaths { get; set; }
        public virtual DbSet<Alert> Alerts { get; set; }
        public virtual DbSet<AlertInfraction> AlertInfractions { get; set; }
        public virtual DbSet<sevenDaysResult> sevenDaysResults { get; set; }
        public virtual DbSet<monthlyResult> monthlyResults { get; set; }
        public virtual DbSet<ReviewMaterial> ReviewMaterials { get; set; }
        public virtual DbSet<Circular> Circulars { get; set; }
        public virtual DbSet<Pledge> Pledges { get; set; }
        public virtual DbSet<MixingStationsAnswersOfFactory> MixingStationsAnswersOfFactories { get; set; }
        public virtual DbSet<MixingStationsQuestion> MixingStationsQuestions { get; set; }
        public virtual DbSet<MixingStationsType> MixingStationsTypes { get; set; }
        public virtual DbSet<ConSamplesSummary> ConSamplesSummaries { get; set; }
        public virtual DbSet<RptVPeriodic> RptVPeriodics { get; set; }
        public virtual DbSet<vw_aspnet_Applications> vw_aspnet_Applications { get; set; }
        public virtual DbSet<vw_aspnet_MembershipUsers> vw_aspnet_MembershipUsers { get; set; }
        public virtual DbSet<vw_aspnet_Profiles> vw_aspnet_Profiles { get; set; }
        public virtual DbSet<vw_aspnet_Roles> vw_aspnet_Roles { get; set; }
        public virtual DbSet<vw_aspnet_Users> vw_aspnet_Users { get; set; }
        public virtual DbSet<vw_aspnet_UsersInRoles> vw_aspnet_UsersInRoles { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Paths> vw_aspnet_WebPartState_Paths { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_Shared> vw_aspnet_WebPartState_Shared { get; set; }
        public virtual DbSet<vw_aspnet_WebPartState_User> vw_aspnet_WebPartState_User { get; set; }
        public virtual DbSet<CheckEquipmentRequirement> CheckEquipmentRequirements { get; set; }
        public virtual DbSet<EquipmentRequirementsType> EquipmentRequirementsTypes { get; set; }
        public virtual DbSet<CheckEquipmentRequirementsOfFactory> CheckEquipmentRequirementsOfFactories { get; set; }
        public virtual DbSet<FactoryEvaluationReport> FactoryEvaluationReports { get; set; }
        public virtual DbSet<ReportResult> ReportResults { get; set; }
        public virtual DbSet<OpenAndCloseFactory> OpenAndCloseFactories { get; set; }
        public virtual DbSet<OpenCloseFactory> OpenCloseFactories { get; set; }
        public virtual DbSet<TechnicalReport> TechnicalReports { get; set; }
        public virtual DbSet<MachineCheck> MachineChecks { get; set; }
        public virtual DbSet<temprutureCheck> temprutureChecks { get; set; }
        public virtual DbSet<BlockFactory> BlockFactories { get; set; }
        public virtual DbSet<BlockUser> BlockUsers { get; set; }
        public virtual DbSet<BlockVisitDetail> BlockVisitDetails { get; set; }
        public virtual DbSet<ClassficationParentItem> ClassficationParentItems { get; set; }
        public virtual DbSet<ClassificationSubItem> ClassificationSubItems { get; set; }
        public virtual DbSet<ClassificationResult> ClassificationResults { get; set; }
        public virtual DbSet<BlockFactoryReport> BlockFactoryReports { get; set; }
        public virtual DbSet<BlockTestResult> BlockTestResults { get; set; }
        public virtual DbSet<BlockInfraction> BlockInfractions { get; set; }
        public virtual DbSet<BlockAlert> BlockAlerts { get; set; }
        public virtual DbSet<BlockPledge> BlockPledges { get; set; }
        public virtual DbSet<BreakSampleFactory> BreakSampleFactories { get; set; }
        public virtual DbSet<ConcreteSample1> ConcreteSample1 { get; set; }
        public virtual DbSet<ReportUpdateHistory> ReportUpdateHistories { get; set; }
    
        public virtual ObjectResult<AsphaltInsepector_Result> AsphaltInsepector()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsphaltInsepector_Result>("AsphaltInsepector");
        }
    
        public virtual ObjectResult<AsphaltInsepectorManager_Result> AsphaltInsepectorManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsphaltInsepectorManager_Result>("AsphaltInsepectorManager");
        }
    
        public virtual ObjectResult<AsphaltReceptionMarshalSamples_Result> AsphaltReceptionMarshalSamples()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsphaltReceptionMarshalSamples_Result>("AsphaltReceptionMarshalSamples");
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword_Result> aspnet_Membership_GetPassword(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword_Result>("aspnet_Membership_GetPassword", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat_Result> aspnet_Membership_GetPasswordWithFormat(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat_Result>("aspnet_Membership_GetPasswordWithFormat", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName_Result> aspnet_Membership_GetUserByName(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName_Result>("aspnet_Membership_GetUserByName", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId_Result> aspnet_Membership_GetUserByUserId(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId_Result>("aspnet_Membership_GetUserByUserId", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties_Result> aspnet_Profile_GetProperties(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties_Result>("aspnet_Profile_GetProperties", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles_Result> aspnet_UsersInRoles_RemoveUsersFromRoles(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual ObjectResult<GetItemByFactoryYealy_Result> GetItemByFactoryYealy(Nullable<int> factoryId, Nullable<int> yEAR, string mixId)
        {
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mixIdParameter = mixId != null ?
                new ObjectParameter("MixId", mixId) :
                new ObjectParameter("MixId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemByFactoryYealy_Result>("GetItemByFactoryYealy", factoryIdParameter, yEARParameter, mixIdParameter);
        }
    
        public virtual ObjectResult<GetrptConcreteSamplesResultsummary_Result> GetrptConcreteSamplesResultsummary(Nullable<int> yEAR, Nullable<int> factoryId)
        {
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetrptConcreteSamplesResultsummary_Result>("GetrptConcreteSamplesResultsummary", yEARParameter, factoryIdParameter);
        }
    
        public virtual ObjectResult<GetSuperPavChartForProject_Result> GetSuperPavChartForProject()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuperPavChartForProject_Result>("GetSuperPavChartForProject");
        }
    
        public virtual ObjectResult<MarshalJmfRecptionLst_Result> MarshalJmfRecptionLst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarshalJmfRecptionLst_Result>("MarshalJmfRecptionLst");
        }
    
        public virtual ObjectResult<MarshalJmfSupplierLst_Result> MarshalJmfSupplierLst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarshalJmfSupplierLst_Result>("MarshalJmfSupplierLst");
        }
    
        public virtual ObjectResult<MarshalJmfTesterLst_Result> MarshalJmfTesterLst()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarshalJmfTesterLst_Result>("MarshalJmfTesterLst");
        }
    
        public virtual ObjectResult<ReceptionSamplesAsphaltSuperPave_Result> ReceptionSamplesAsphaltSuperPave()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceptionSamplesAsphaltSuperPave_Result>("ReceptionSamplesAsphaltSuperPave");
        }
    
        public virtual ObjectResult<ReceptionSamplesSoil_Result> ReceptionSamplesSoil()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceptionSamplesSoil_Result>("ReceptionSamplesSoil");
        }
    
        public virtual ObjectResult<selectClassificationByFact_Result> selectClassificationByFact(string factoryId, Nullable<int> clsYear)
        {
            var factoryIdParameter = factoryId != null ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(string));
    
            var clsYearParameter = clsYear.HasValue ?
                new ObjectParameter("ClsYear", clsYear) :
                new ObjectParameter("ClsYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectClassificationByFact_Result>("selectClassificationByFact", factoryIdParameter, clsYearParameter);
        }
    
        public virtual ObjectResult<SoilInsepector_Result> SoilInsepector()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilInsepector_Result>("SoilInsepector");
        }
    
        public virtual ObjectResult<SoilInsepectorManager_Result> SoilInsepectorManager()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilInsepectorManager_Result>("SoilInsepectorManager");
        }
    
        public virtual ObjectResult<SoilSamplesCompaction_Result> SoilSamplesCompaction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilSamplesCompaction_Result>("SoilSamplesCompaction");
        }
    
        public virtual ObjectResult<SoilSummary_Result> SoilSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilSummary_Result>("SoilSummary");
        }
    
        public virtual ObjectResult<SuperPaveSamplesCompaction_Result> SuperPaveSamplesCompaction()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SuperPaveSamplesCompaction_Result>("SuperPaveSamplesCompaction");
        }
    
        public virtual ObjectResult<SuperPaveSummary_Result> SuperPaveSummary()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SuperPaveSummary_Result>("SuperPaveSummary");
        }
    
        public virtual ObjectResult<GetMixingDesignDetails_Result> GetMixingDesignDetails()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMixingDesignDetails_Result>("GetMixingDesignDetails");
        }
    
        public virtual int AddUpdateUser(Nullable<int> id, string fullName, string phoneNumber, string address, string eMail, string username, string password, byte[] photo, string jobTitle, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUser", idParameter, fullNameParameter, phoneNumberParameter, addressParameter, eMailParameter, usernameParameter, passwordParameter, photoParameter, jobTitleParameter, isActiveParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateConcreteSample(Nullable<long> reportNo, Nullable<System.DateTime> reportDate, string factoryName, string factoryLocation, string mixerNumber, Nullable<long> visitNumber, Nullable<long> sampleNumber, string truckNumber, string invoiceNumber, string clientName, string visitLocation, Nullable<double> latitude, Nullable<double> longitude, string concreteRank, Nullable<double> concreteTemperture, Nullable<double> waterTemperature, Nullable<double> weatherTemperture, Nullable<double> downAmount, string cementType, string cementSource, string additionType, Nullable<double> additionAmount, Nullable<double> cementWeight, Nullable<double> waterWieght, Nullable<double> washedSandWeight, Nullable<double> whiteSandWeight, Nullable<double> rubble3by4, Nullable<double> rubble3by8, Nullable<bool> isCleanUsage, Nullable<bool> isBasicUsage, Nullable<bool> isColumnUsage, Nullable<bool> isRoofUsage, Nullable<bool> isOtherUsage, Nullable<bool> isCleanLocation, string cleanDoc, Nullable<bool> isDustControlInStation, string dustDoc, Nullable<bool> isRokamSummer, string summerDoc, Nullable<bool> isLabEngineer, string labDoc, Nullable<bool> isMoldanatInTrucks, string truckDoc, Nullable<bool> isPeopleSafty, string safteyDoc, Nullable<int> sampledBy, Nullable<System.DateTime> createdDate, ObjectParameter statusCode, ObjectParameter statusMessage, string invoicePhoto, string cleanNote, string dustNote, string summerNote, string labNote, string truckNote, string safteyNote, string otherReason)
        {
            var reportNoParameter = reportNo.HasValue ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(long));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var factoryNameParameter = factoryName != null ?
                new ObjectParameter("FactoryName", factoryName) :
                new ObjectParameter("FactoryName", typeof(string));
    
            var factoryLocationParameter = factoryLocation != null ?
                new ObjectParameter("FactoryLocation", factoryLocation) :
                new ObjectParameter("FactoryLocation", typeof(string));
    
            var mixerNumberParameter = mixerNumber != null ?
                new ObjectParameter("MixerNumber", mixerNumber) :
                new ObjectParameter("MixerNumber", typeof(string));
    
            var visitNumberParameter = visitNumber.HasValue ?
                new ObjectParameter("VisitNumber", visitNumber) :
                new ObjectParameter("VisitNumber", typeof(long));
    
            var sampleNumberParameter = sampleNumber.HasValue ?
                new ObjectParameter("SampleNumber", sampleNumber) :
                new ObjectParameter("SampleNumber", typeof(long));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var visitLocationParameter = visitLocation != null ?
                new ObjectParameter("VisitLocation", visitLocation) :
                new ObjectParameter("VisitLocation", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var concreteRankParameter = concreteRank != null ?
                new ObjectParameter("ConcreteRank", concreteRank) :
                new ObjectParameter("ConcreteRank", typeof(string));
    
            var concreteTempertureParameter = concreteTemperture.HasValue ?
                new ObjectParameter("ConcreteTemperture", concreteTemperture) :
                new ObjectParameter("ConcreteTemperture", typeof(double));
    
            var waterTemperatureParameter = waterTemperature.HasValue ?
                new ObjectParameter("WaterTemperature", waterTemperature) :
                new ObjectParameter("WaterTemperature", typeof(double));
    
            var weatherTempertureParameter = weatherTemperture.HasValue ?
                new ObjectParameter("WeatherTemperture", weatherTemperture) :
                new ObjectParameter("WeatherTemperture", typeof(double));
    
            var downAmountParameter = downAmount.HasValue ?
                new ObjectParameter("DownAmount", downAmount) :
                new ObjectParameter("DownAmount", typeof(double));
    
            var cementTypeParameter = cementType != null ?
                new ObjectParameter("CementType", cementType) :
                new ObjectParameter("CementType", typeof(string));
    
            var cementSourceParameter = cementSource != null ?
                new ObjectParameter("CementSource", cementSource) :
                new ObjectParameter("CementSource", typeof(string));
    
            var additionTypeParameter = additionType != null ?
                new ObjectParameter("AdditionType", additionType) :
                new ObjectParameter("AdditionType", typeof(string));
    
            var additionAmountParameter = additionAmount.HasValue ?
                new ObjectParameter("AdditionAmount", additionAmount) :
                new ObjectParameter("AdditionAmount", typeof(double));
    
            var cementWeightParameter = cementWeight.HasValue ?
                new ObjectParameter("CementWeight", cementWeight) :
                new ObjectParameter("CementWeight", typeof(double));
    
            var waterWieghtParameter = waterWieght.HasValue ?
                new ObjectParameter("WaterWieght", waterWieght) :
                new ObjectParameter("WaterWieght", typeof(double));
    
            var washedSandWeightParameter = washedSandWeight.HasValue ?
                new ObjectParameter("WashedSandWeight", washedSandWeight) :
                new ObjectParameter("WashedSandWeight", typeof(double));
    
            var whiteSandWeightParameter = whiteSandWeight.HasValue ?
                new ObjectParameter("WhiteSandWeight", whiteSandWeight) :
                new ObjectParameter("WhiteSandWeight", typeof(double));
    
            var rubble3by4Parameter = rubble3by4.HasValue ?
                new ObjectParameter("Rubble3by4", rubble3by4) :
                new ObjectParameter("Rubble3by4", typeof(double));
    
            var rubble3by8Parameter = rubble3by8.HasValue ?
                new ObjectParameter("Rubble3by8", rubble3by8) :
                new ObjectParameter("Rubble3by8", typeof(double));
    
            var isCleanUsageParameter = isCleanUsage.HasValue ?
                new ObjectParameter("IsCleanUsage", isCleanUsage) :
                new ObjectParameter("IsCleanUsage", typeof(bool));
    
            var isBasicUsageParameter = isBasicUsage.HasValue ?
                new ObjectParameter("IsBasicUsage", isBasicUsage) :
                new ObjectParameter("IsBasicUsage", typeof(bool));
    
            var isColumnUsageParameter = isColumnUsage.HasValue ?
                new ObjectParameter("IsColumnUsage", isColumnUsage) :
                new ObjectParameter("IsColumnUsage", typeof(bool));
    
            var isRoofUsageParameter = isRoofUsage.HasValue ?
                new ObjectParameter("IsRoofUsage", isRoofUsage) :
                new ObjectParameter("IsRoofUsage", typeof(bool));
    
            var isOtherUsageParameter = isOtherUsage.HasValue ?
                new ObjectParameter("IsOtherUsage", isOtherUsage) :
                new ObjectParameter("IsOtherUsage", typeof(bool));
    
            var isCleanLocationParameter = isCleanLocation.HasValue ?
                new ObjectParameter("IsCleanLocation", isCleanLocation) :
                new ObjectParameter("IsCleanLocation", typeof(bool));
    
            var cleanDocParameter = cleanDoc != null ?
                new ObjectParameter("CleanDoc", cleanDoc) :
                new ObjectParameter("CleanDoc", typeof(string));
    
            var isDustControlInStationParameter = isDustControlInStation.HasValue ?
                new ObjectParameter("IsDustControlInStation", isDustControlInStation) :
                new ObjectParameter("IsDustControlInStation", typeof(bool));
    
            var dustDocParameter = dustDoc != null ?
                new ObjectParameter("DustDoc", dustDoc) :
                new ObjectParameter("DustDoc", typeof(string));
    
            var isRokamSummerParameter = isRokamSummer.HasValue ?
                new ObjectParameter("IsRokamSummer", isRokamSummer) :
                new ObjectParameter("IsRokamSummer", typeof(bool));
    
            var summerDocParameter = summerDoc != null ?
                new ObjectParameter("SummerDoc", summerDoc) :
                new ObjectParameter("SummerDoc", typeof(string));
    
            var isLabEngineerParameter = isLabEngineer.HasValue ?
                new ObjectParameter("IsLabEngineer", isLabEngineer) :
                new ObjectParameter("IsLabEngineer", typeof(bool));
    
            var labDocParameter = labDoc != null ?
                new ObjectParameter("LabDoc", labDoc) :
                new ObjectParameter("LabDoc", typeof(string));
    
            var isMoldanatInTrucksParameter = isMoldanatInTrucks.HasValue ?
                new ObjectParameter("IsMoldanatInTrucks", isMoldanatInTrucks) :
                new ObjectParameter("IsMoldanatInTrucks", typeof(bool));
    
            var truckDocParameter = truckDoc != null ?
                new ObjectParameter("TruckDoc", truckDoc) :
                new ObjectParameter("TruckDoc", typeof(string));
    
            var isPeopleSaftyParameter = isPeopleSafty.HasValue ?
                new ObjectParameter("IsPeopleSafty", isPeopleSafty) :
                new ObjectParameter("IsPeopleSafty", typeof(bool));
    
            var safteyDocParameter = safteyDoc != null ?
                new ObjectParameter("SafteyDoc", safteyDoc) :
                new ObjectParameter("SafteyDoc", typeof(string));
    
            var sampledByParameter = sampledBy.HasValue ?
                new ObjectParameter("SampledBy", sampledBy) :
                new ObjectParameter("SampledBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var invoicePhotoParameter = invoicePhoto != null ?
                new ObjectParameter("InvoicePhoto", invoicePhoto) :
                new ObjectParameter("InvoicePhoto", typeof(string));
    
            var cleanNoteParameter = cleanNote != null ?
                new ObjectParameter("CleanNote", cleanNote) :
                new ObjectParameter("CleanNote", typeof(string));
    
            var dustNoteParameter = dustNote != null ?
                new ObjectParameter("DustNote", dustNote) :
                new ObjectParameter("DustNote", typeof(string));
    
            var summerNoteParameter = summerNote != null ?
                new ObjectParameter("SummerNote", summerNote) :
                new ObjectParameter("SummerNote", typeof(string));
    
            var labNoteParameter = labNote != null ?
                new ObjectParameter("LabNote", labNote) :
                new ObjectParameter("LabNote", typeof(string));
    
            var truckNoteParameter = truckNote != null ?
                new ObjectParameter("TruckNote", truckNote) :
                new ObjectParameter("TruckNote", typeof(string));
    
            var safteyNoteParameter = safteyNote != null ?
                new ObjectParameter("SafteyNote", safteyNote) :
                new ObjectParameter("SafteyNote", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateConcreteSample", reportNoParameter, reportDateParameter, factoryNameParameter, factoryLocationParameter, mixerNumberParameter, visitNumberParameter, sampleNumberParameter, truckNumberParameter, invoiceNumberParameter, clientNameParameter, visitLocationParameter, latitudeParameter, longitudeParameter, concreteRankParameter, concreteTempertureParameter, waterTemperatureParameter, weatherTempertureParameter, downAmountParameter, cementTypeParameter, cementSourceParameter, additionTypeParameter, additionAmountParameter, cementWeightParameter, waterWieghtParameter, washedSandWeightParameter, whiteSandWeightParameter, rubble3by4Parameter, rubble3by8Parameter, isCleanUsageParameter, isBasicUsageParameter, isColumnUsageParameter, isRoofUsageParameter, isOtherUsageParameter, isCleanLocationParameter, cleanDocParameter, isDustControlInStationParameter, dustDocParameter, isRokamSummerParameter, summerDocParameter, isLabEngineerParameter, labDocParameter, isMoldanatInTrucksParameter, truckDocParameter, isPeopleSaftyParameter, safteyDocParameter, sampledByParameter, createdDateParameter, statusCode, statusMessage, invoicePhotoParameter, cleanNoteParameter, dustNoteParameter, summerNoteParameter, labNoteParameter, truckNoteParameter, safteyNoteParameter, otherReasonParameter);
        }
    
        public virtual int AddUpdateVisit(Nullable<long> id, Nullable<long> factoryId, Nullable<long> monitorId, Nullable<System.DateTime> visitDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(long));
    
            var monitorIdParameter = monitorId.HasValue ?
                new ObjectParameter("MonitorId", monitorId) :
                new ObjectParameter("MonitorId", typeof(long));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateVisit", idParameter, factoryIdParameter, monitorIdParameter, visitDateParameter, statusCode, statusMessage);
        }
    
        public virtual int UpdateConcreteSample(Nullable<long> reportNo, 
            Nullable<System.DateTime> reportDate, 
            string factoryName, string factoryLocation, 
            string mixerNumber, Nullable<long> visitNumber,
            Nullable<long> sampleNumber, string truckNumber,
            string invoiceNumber, string clientName, string visitLocation,
            Nullable<double> latitude, Nullable<double> longitude, string concreteRank, 
            Nullable<double> concreteTemperture, Nullable<double> waterTemperature, 
            Nullable<double> weatherTemperture, Nullable<double> downAmount, 
            string cementType, string cementSource, string additionType, string additionAmount, Nullable<double> cementWeight, Nullable<double> waterWieght, Nullable<double> washedSandWeight, Nullable<double> whiteSandWeight, Nullable<double> rubble3by4, Nullable<double> rubble3by8, Nullable<bool> isCleanUsage, Nullable<bool> isBasicUsage, Nullable<bool> isColumnUsage, Nullable<bool> isRoofUsage, Nullable<bool> isOtherUsage, Nullable<bool> isCleanLocation, string cleanDoc, Nullable<bool> isDustControlInStation, string dustDoc, Nullable<bool> isRokamSummer, string summerDoc, Nullable<bool> isLabEngineer, string labDoc, Nullable<bool> isMoldanatInTrucks, string truckDoc, Nullable<bool> isPeopleSafty, string safteyDoc, Nullable<int> sampledBy, Nullable<System.DateTime> createdDate, ObjectParameter statusCode, ObjectParameter statusMessage, string cleanNote, string dustNote, string summerNote, string labNote, string truckNote, string safteyNote, string otherReason)
        {
            var reportNoParameter = reportNo.HasValue ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(long));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var factoryNameParameter = factoryName != null ?
                new ObjectParameter("FactoryName", factoryName) :
                new ObjectParameter("FactoryName", typeof(string));
    
            var factoryLocationParameter = factoryLocation != null ?
                new ObjectParameter("FactoryLocation", factoryLocation) :
                new ObjectParameter("FactoryLocation", typeof(string));
    
            var mixerNumberParameter = mixerNumber != null ?
                new ObjectParameter("MixerNumber", mixerNumber) :
                new ObjectParameter("MixerNumber", typeof(string));
    
            var visitNumberParameter = visitNumber.HasValue ?
                new ObjectParameter("VisitNumber", visitNumber) :
                new ObjectParameter("VisitNumber", typeof(long));
    
            var sampleNumberParameter = sampleNumber.HasValue ?
                new ObjectParameter("SampleNumber", sampleNumber) :
                new ObjectParameter("SampleNumber", typeof(long));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var visitLocationParameter = visitLocation != null ?
                new ObjectParameter("VisitLocation", visitLocation) :
                new ObjectParameter("VisitLocation", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var concreteRankParameter = concreteRank != null ?
                new ObjectParameter("ConcreteRank", concreteRank) :
                new ObjectParameter("ConcreteRank", typeof(string));
    
            var concreteTempertureParameter = concreteTemperture.HasValue ?
                new ObjectParameter("ConcreteTemperture", concreteTemperture) :
                new ObjectParameter("ConcreteTemperture", typeof(double));
    
            var waterTemperatureParameter = waterTemperature.HasValue ?
                new ObjectParameter("WaterTemperature", waterTemperature) :
                new ObjectParameter("WaterTemperature", typeof(double));
    
            var weatherTempertureParameter = weatherTemperture.HasValue ?
                new ObjectParameter("WeatherTemperture", weatherTemperture) :
                new ObjectParameter("WeatherTemperture", typeof(double));
    
            var downAmountParameter = downAmount.HasValue ?
                new ObjectParameter("DownAmount", downAmount) :
                new ObjectParameter("DownAmount", typeof(double));
    
            var cementTypeParameter = cementType != null ?
                new ObjectParameter("CementType", cementType) :
                new ObjectParameter("CementType", typeof(string));
    
            var cementSourceParameter = cementSource != null ?
                new ObjectParameter("CementSource", cementSource) :
                new ObjectParameter("CementSource", typeof(string));
    
            var additionTypeParameter = additionType != null ?
                new ObjectParameter("AdditionType", additionType) :
                new ObjectParameter("AdditionType", typeof(string));
    
            var additionAmountParameter = additionAmount != "" ?
                new ObjectParameter("AdditionAmount", additionAmount) :
                new ObjectParameter("AdditionAmount", typeof(double));
    
            var cementWeightParameter = cementWeight.HasValue ?
                new ObjectParameter("CementWeight", cementWeight) :
                new ObjectParameter("CementWeight", typeof(double));
    
            var waterWieghtParameter = waterWieght.HasValue ?
                new ObjectParameter("WaterWieght", waterWieght) :
                new ObjectParameter("WaterWieght", typeof(double));
    
            var washedSandWeightParameter = washedSandWeight.HasValue ?
                new ObjectParameter("WashedSandWeight", washedSandWeight) :
                new ObjectParameter("WashedSandWeight", typeof(double));
    
            var whiteSandWeightParameter = whiteSandWeight.HasValue ?
                new ObjectParameter("WhiteSandWeight", whiteSandWeight) :
                new ObjectParameter("WhiteSandWeight", typeof(double));
    
            var rubble3by4Parameter = rubble3by4.HasValue ?
                new ObjectParameter("Rubble3by4", rubble3by4) :
                new ObjectParameter("Rubble3by4", typeof(double));
    
            var rubble3by8Parameter = rubble3by8.HasValue ?
                new ObjectParameter("Rubble3by8", rubble3by8) :
                new ObjectParameter("Rubble3by8", typeof(double));
    
            var isCleanUsageParameter = isCleanUsage.HasValue ?
                new ObjectParameter("IsCleanUsage", isCleanUsage) :
                new ObjectParameter("IsCleanUsage", typeof(bool));
    
            var isBasicUsageParameter = isBasicUsage.HasValue ?
                new ObjectParameter("IsBasicUsage", isBasicUsage) :
                new ObjectParameter("IsBasicUsage", typeof(bool));
    
            var isColumnUsageParameter = isColumnUsage.HasValue ?
                new ObjectParameter("IsColumnUsage", isColumnUsage) :
                new ObjectParameter("IsColumnUsage", typeof(bool));
    
            var isRoofUsageParameter = isRoofUsage.HasValue ?
                new ObjectParameter("IsRoofUsage", isRoofUsage) :
                new ObjectParameter("IsRoofUsage", typeof(bool));
    
            var isOtherUsageParameter = isOtherUsage.HasValue ?
                new ObjectParameter("IsOtherUsage", isOtherUsage) :
                new ObjectParameter("IsOtherUsage", typeof(bool));
    
            var isCleanLocationParameter = isCleanLocation.HasValue ?
                new ObjectParameter("IsCleanLocation", isCleanLocation) :
                new ObjectParameter("IsCleanLocation", typeof(bool));
    
            var cleanDocParameter = cleanDoc != null ?
                new ObjectParameter("CleanDoc", cleanDoc) :
                new ObjectParameter("CleanDoc", typeof(string));
    
            var isDustControlInStationParameter = isDustControlInStation.HasValue ?
                new ObjectParameter("IsDustControlInStation", isDustControlInStation) :
                new ObjectParameter("IsDustControlInStation", typeof(bool));
    
            var dustDocParameter = dustDoc != null ?
                new ObjectParameter("DustDoc", dustDoc) :
                new ObjectParameter("DustDoc", typeof(string));
    
            var isRokamSummerParameter = isRokamSummer.HasValue ?
                new ObjectParameter("IsRokamSummer", isRokamSummer) :
                new ObjectParameter("IsRokamSummer", typeof(bool));
    
            var summerDocParameter = summerDoc != null ?
                new ObjectParameter("SummerDoc", summerDoc) :
                new ObjectParameter("SummerDoc", typeof(string));
    
            var isLabEngineerParameter = isLabEngineer.HasValue ?
                new ObjectParameter("IsLabEngineer", isLabEngineer) :
                new ObjectParameter("IsLabEngineer", typeof(bool));
    
            var labDocParameter = labDoc != null ?
                new ObjectParameter("LabDoc", labDoc) :
                new ObjectParameter("LabDoc", typeof(string));
    
            var isMoldanatInTrucksParameter = isMoldanatInTrucks.HasValue ?
                new ObjectParameter("IsMoldanatInTrucks", isMoldanatInTrucks) :
                new ObjectParameter("IsMoldanatInTrucks", typeof(bool));
    
            var truckDocParameter = truckDoc != null ?
                new ObjectParameter("TruckDoc", truckDoc) :
                new ObjectParameter("TruckDoc", typeof(string));
    
            var isPeopleSaftyParameter = isPeopleSafty.HasValue ?
                new ObjectParameter("IsPeopleSafty", isPeopleSafty) :
                new ObjectParameter("IsPeopleSafty", typeof(bool));
    
            var safteyDocParameter = safteyDoc != null ?
                new ObjectParameter("SafteyDoc", safteyDoc) :
                new ObjectParameter("SafteyDoc", typeof(string));
    
            var sampledByParameter = sampledBy.HasValue ?
                new ObjectParameter("SampledBy", sampledBy) :
                new ObjectParameter("SampledBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var cleanNoteParameter = cleanNote != null ?
                new ObjectParameter("CleanNote", cleanNote) :
                new ObjectParameter("CleanNote", typeof(string));
    
            var dustNoteParameter = dustNote != null ?
                new ObjectParameter("DustNote", dustNote) :
                new ObjectParameter("DustNote", typeof(string));
    
            var summerNoteParameter = summerNote != null ?
                new ObjectParameter("SummerNote", summerNote) :
                new ObjectParameter("SummerNote", typeof(string));
    
            var labNoteParameter = labNote != null ?
                new ObjectParameter("LabNote", labNote) :
                new ObjectParameter("LabNote", typeof(string));
    
            var truckNoteParameter = truckNote != null ?
                new ObjectParameter("TruckNote", truckNote) :
                new ObjectParameter("TruckNote", typeof(string));
    
            var safteyNoteParameter = safteyNote != null ?
                new ObjectParameter("SafteyNote", safteyNote) :
                new ObjectParameter("SafteyNote", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConcreteSample", reportNoParameter, reportDateParameter, factoryNameParameter, factoryLocationParameter, mixerNumberParameter, visitNumberParameter, sampleNumberParameter, truckNumberParameter, invoiceNumberParameter, clientNameParameter, visitLocationParameter, latitudeParameter, longitudeParameter, concreteRankParameter, concreteTempertureParameter, waterTemperatureParameter, weatherTempertureParameter, downAmountParameter, cementTypeParameter, cementSourceParameter, additionTypeParameter, additionAmountParameter, cementWeightParameter, waterWieghtParameter, washedSandWeightParameter, whiteSandWeightParameter, rubble3by4Parameter, rubble3by8Parameter, isCleanUsageParameter, isBasicUsageParameter, isColumnUsageParameter, isRoofUsageParameter, isOtherUsageParameter, isCleanLocationParameter, cleanDocParameter, isDustControlInStationParameter, dustDocParameter, isRokamSummerParameter, summerDocParameter, isLabEngineerParameter, labDocParameter, isMoldanatInTrucksParameter, truckDocParameter, isPeopleSaftyParameter, safteyDocParameter, sampledByParameter, createdDateParameter, statusCode, statusMessage, cleanNoteParameter, dustNoteParameter, summerNoteParameter, labNoteParameter, truckNoteParameter, safteyNoteParameter, otherReasonParameter);
        }
    
        public virtual int UpdateConcreteReport(Nullable<long> sampleNumber, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var sampleNumberParameter = sampleNumber.HasValue ?
                new ObjectParameter("SampleNumber", sampleNumber) :
                new ObjectParameter("SampleNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConcreteReport", sampleNumberParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateFactory(Nullable<int> id, string name, string type, Nullable<double> productionCapacity, Nullable<double> dailyProductionRate, Nullable<int> numberofMixers, Nullable<int> numberofTrucks, string phoneNumber, string faxNumber, string mailBox, string eMail, string status, Nullable<double> latitude, Nullable<double> longitude, string location, string ownerName, string ownerEmail, string ownerPhoneNumber, string managerName, string managerEmail, string managerPhoneNumber, string managerExperience, string engineerName, string engineerEmail, string engineerPhoneNumber, string engineerExperience, string comments, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var productionCapacityParameter = productionCapacity.HasValue ?
                new ObjectParameter("ProductionCapacity", productionCapacity) :
                new ObjectParameter("ProductionCapacity", typeof(double));
    
            var dailyProductionRateParameter = dailyProductionRate.HasValue ?
                new ObjectParameter("DailyProductionRate", dailyProductionRate) :
                new ObjectParameter("DailyProductionRate", typeof(double));
    
            var numberofMixersParameter = numberofMixers.HasValue ?
                new ObjectParameter("NumberofMixers", numberofMixers) :
                new ObjectParameter("NumberofMixers", typeof(int));
    
            var numberofTrucksParameter = numberofTrucks.HasValue ?
                new ObjectParameter("NumberofTrucks", numberofTrucks) :
                new ObjectParameter("NumberofTrucks", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var mailBoxParameter = mailBox != null ?
                new ObjectParameter("MailBox", mailBox) :
                new ObjectParameter("MailBox", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var ownerPhoneNumberParameter = ownerPhoneNumber != null ?
                new ObjectParameter("OwnerPhoneNumber", ownerPhoneNumber) :
                new ObjectParameter("OwnerPhoneNumber", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var managerEmailParameter = managerEmail != null ?
                new ObjectParameter("ManagerEmail", managerEmail) :
                new ObjectParameter("ManagerEmail", typeof(string));
    
            var managerPhoneNumberParameter = managerPhoneNumber != null ?
                new ObjectParameter("ManagerPhoneNumber", managerPhoneNumber) :
                new ObjectParameter("ManagerPhoneNumber", typeof(string));
    
            var managerExperienceParameter = managerExperience != null ?
                new ObjectParameter("ManagerExperience", managerExperience) :
                new ObjectParameter("ManagerExperience", typeof(string));
    
            var engineerNameParameter = engineerName != null ?
                new ObjectParameter("EngineerName", engineerName) :
                new ObjectParameter("EngineerName", typeof(string));
    
            var engineerEmailParameter = engineerEmail != null ?
                new ObjectParameter("EngineerEmail", engineerEmail) :
                new ObjectParameter("EngineerEmail", typeof(string));
    
            var engineerPhoneNumberParameter = engineerPhoneNumber != null ?
                new ObjectParameter("EngineerPhoneNumber", engineerPhoneNumber) :
                new ObjectParameter("EngineerPhoneNumber", typeof(string));
    
            var engineerExperienceParameter = engineerExperience != null ?
                new ObjectParameter("EngineerExperience", engineerExperience) :
                new ObjectParameter("EngineerExperience", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateFactory", idParameter, nameParameter, typeParameter, productionCapacityParameter, dailyProductionRateParameter, numberofMixersParameter, numberofTrucksParameter, phoneNumberParameter, faxNumberParameter, mailBoxParameter, eMailParameter, statusParameter, latitudeParameter, longitudeParameter, locationParameter, ownerNameParameter, ownerEmailParameter, ownerPhoneNumberParameter, managerNameParameter, managerEmailParameter, managerPhoneNumberParameter, managerExperienceParameter, engineerNameParameter, engineerEmailParameter, engineerPhoneNumberParameter, engineerExperienceParameter, commentsParameter, isActiveParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateConcMixDesing(Nullable<long> id, Nullable<int> factoryId, string concreteRank, Nullable<double> cementWeight, Nullable<double> waterWeight, Nullable<double> washedSand, Nullable<double> rubble3by4, Nullable<double> rubble3by8, Nullable<double> whiteSand, string cement, string water, string washedSand2, string rubble3by42, string rubble3by82, string whiteSand2, Nullable<double> day28, Nullable<double> landing, string status, Nullable<System.DateTime> expiryDate, string comments, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(int));
    
            var concreteRankParameter = concreteRank != null ?
                new ObjectParameter("ConcreteRank", concreteRank) :
                new ObjectParameter("ConcreteRank", typeof(string));
    
            var cementWeightParameter = cementWeight.HasValue ?
                new ObjectParameter("CementWeight", cementWeight) :
                new ObjectParameter("CementWeight", typeof(double));
    
            var waterWeightParameter = waterWeight.HasValue ?
                new ObjectParameter("WaterWeight", waterWeight) :
                new ObjectParameter("WaterWeight", typeof(double));
    
            var washedSandParameter = washedSand.HasValue ?
                new ObjectParameter("WashedSand", washedSand) :
                new ObjectParameter("WashedSand", typeof(double));
    
            var rubble3by4Parameter = rubble3by4.HasValue ?
                new ObjectParameter("Rubble3by4", rubble3by4) :
                new ObjectParameter("Rubble3by4", typeof(double));
    
            var rubble3by8Parameter = rubble3by8.HasValue ?
                new ObjectParameter("Rubble3by8", rubble3by8) :
                new ObjectParameter("Rubble3by8", typeof(double));
    
            var whiteSandParameter = whiteSand.HasValue ?
                new ObjectParameter("WhiteSand", whiteSand) :
                new ObjectParameter("WhiteSand", typeof(double));
    
            var cementParameter = cement != null ?
                new ObjectParameter("Cement", cement) :
                new ObjectParameter("Cement", typeof(string));
    
            var waterParameter = water != null ?
                new ObjectParameter("Water", water) :
                new ObjectParameter("Water", typeof(string));
    
            var washedSand2Parameter = washedSand2 != null ?
                new ObjectParameter("WashedSand2", washedSand2) :
                new ObjectParameter("WashedSand2", typeof(string));
    
            var rubble3by42Parameter = rubble3by42 != null ?
                new ObjectParameter("Rubble3by42", rubble3by42) :
                new ObjectParameter("Rubble3by42", typeof(string));
    
            var rubble3by82Parameter = rubble3by82 != null ?
                new ObjectParameter("Rubble3by82", rubble3by82) :
                new ObjectParameter("Rubble3by82", typeof(string));
    
            var whiteSand2Parameter = whiteSand2 != null ?
                new ObjectParameter("WhiteSand2", whiteSand2) :
                new ObjectParameter("WhiteSand2", typeof(string));
    
            var day28Parameter = day28.HasValue ?
                new ObjectParameter("Day28", day28) :
                new ObjectParameter("Day28", typeof(double));
    
            var landingParameter = landing.HasValue ?
                new ObjectParameter("Landing", landing) :
                new ObjectParameter("Landing", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateConcMixDesing", idParameter, factoryIdParameter, concreteRankParameter, cementWeightParameter, waterWeightParameter, washedSandParameter, rubble3by4Parameter, rubble3by8Parameter, whiteSandParameter, cementParameter, waterParameter, washedSand2Parameter, rubble3by42Parameter, rubble3by82Parameter, whiteSand2Parameter, day28Parameter, landingParameter, statusParameter, expiryDateParameter, commentsParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual ObjectResult<Nullable<int>> AddUpdateConcMixDesing1(Nullable<long> id, Nullable<int> factoryId, string concreteRank, Nullable<double> cementWeight, Nullable<double> waterWeight, Nullable<double> washedSand, Nullable<double> rubble3by4, Nullable<double> rubble3by8, Nullable<double> whiteSand, string cement, string water, string washedSand2, string rubble3by42, string rubble3by82, string whiteSand2, Nullable<double> day28, Nullable<double> landing, string status, Nullable<System.DateTime> expiryDate, string comments, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(int));
    
            var concreteRankParameter = concreteRank != null ?
                new ObjectParameter("ConcreteRank", concreteRank) :
                new ObjectParameter("ConcreteRank", typeof(string));
    
            var cementWeightParameter = cementWeight.HasValue ?
                new ObjectParameter("CementWeight", cementWeight) :
                new ObjectParameter("CementWeight", typeof(double));
    
            var waterWeightParameter = waterWeight.HasValue ?
                new ObjectParameter("WaterWeight", waterWeight) :
                new ObjectParameter("WaterWeight", typeof(double));
    
            var washedSandParameter = washedSand.HasValue ?
                new ObjectParameter("WashedSand", washedSand) :
                new ObjectParameter("WashedSand", typeof(double));
    
            var rubble3by4Parameter = rubble3by4.HasValue ?
                new ObjectParameter("Rubble3by4", rubble3by4) :
                new ObjectParameter("Rubble3by4", typeof(double));
    
            var rubble3by8Parameter = rubble3by8.HasValue ?
                new ObjectParameter("Rubble3by8", rubble3by8) :
                new ObjectParameter("Rubble3by8", typeof(double));
    
            var whiteSandParameter = whiteSand.HasValue ?
                new ObjectParameter("WhiteSand", whiteSand) :
                new ObjectParameter("WhiteSand", typeof(double));
    
            var cementParameter = cement != null ?
                new ObjectParameter("Cement", cement) :
                new ObjectParameter("Cement", typeof(string));
    
            var waterParameter = water != null ?
                new ObjectParameter("Water", water) :
                new ObjectParameter("Water", typeof(string));
    
            var washedSand2Parameter = washedSand2 != null ?
                new ObjectParameter("WashedSand2", washedSand2) :
                new ObjectParameter("WashedSand2", typeof(string));
    
            var rubble3by42Parameter = rubble3by42 != null ?
                new ObjectParameter("Rubble3by42", rubble3by42) :
                new ObjectParameter("Rubble3by42", typeof(string));
    
            var rubble3by82Parameter = rubble3by82 != null ?
                new ObjectParameter("Rubble3by82", rubble3by82) :
                new ObjectParameter("Rubble3by82", typeof(string));
    
            var whiteSand2Parameter = whiteSand2 != null ?
                new ObjectParameter("WhiteSand2", whiteSand2) :
                new ObjectParameter("WhiteSand2", typeof(string));
    
            var day28Parameter = day28.HasValue ?
                new ObjectParameter("Day28", day28) :
                new ObjectParameter("Day28", typeof(double));
    
            var landingParameter = landing.HasValue ?
                new ObjectParameter("Landing", landing) :
                new ObjectParameter("Landing", typeof(double));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var expiryDateParameter = expiryDate.HasValue ?
                new ObjectParameter("ExpiryDate", expiryDate) :
                new ObjectParameter("ExpiryDate", typeof(System.DateTime));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("AddUpdateConcMixDesing1", idParameter, factoryIdParameter, concreteRankParameter, cementWeightParameter, waterWeightParameter, washedSandParameter, rubble3by4Parameter, rubble3by8Parameter, whiteSandParameter, cementParameter, waterParameter, washedSand2Parameter, rubble3by42Parameter, rubble3by82Parameter, whiteSand2Parameter, day28Parameter, landingParameter, statusParameter, expiryDateParameter, commentsParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateConcreteSample1(Nullable<long> reportNo, Nullable<System.DateTime> reportDate, string factoryName, string factoryLocation, string mixerNumber, Nullable<long> visitNumber, Nullable<long> sampleNumber, string truckNumber, string invoiceNumber, string clientName, string visitLocation, Nullable<double> latitude, Nullable<double> longitude, string concreteRank, Nullable<double> concreteTemperture, Nullable<double> waterTemperature, Nullable<double> weatherTemperture, Nullable<double> downAmount, string cementType, string cementSource, string additionType, Nullable<double> additionAmount, Nullable<double> cementWeight, Nullable<double> waterWieght, Nullable<double> washedSandWeight, Nullable<double> whiteSandWeight, Nullable<double> rubble3by4, Nullable<double> rubble3by8, Nullable<bool> isCleanUsage, Nullable<bool> isBasicUsage, Nullable<bool> isColumnUsage, Nullable<bool> isRoofUsage, Nullable<bool> isOtherUsage, Nullable<bool> isCleanLocation, string cleanDoc, Nullable<bool> isDustControlInStation, string dustDoc, Nullable<bool> isRokamSummer, string summerDoc, Nullable<bool> isLabEngineer, string labDoc, Nullable<bool> isMoldanatInTrucks, string truckDoc, Nullable<bool> isPeopleSafty, string safteyDoc, Nullable<int> sampledBy, Nullable<System.DateTime> createdDate, ObjectParameter statusCode, ObjectParameter statusMessage, string invoicePhoto, string cleanNote, string dustNote, string summerNote, string labNote, string truckNote, string safteyNote, string otherReason)
        {
            var reportNoParameter = reportNo.HasValue ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(long));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var factoryNameParameter = factoryName != null ?
                new ObjectParameter("FactoryName", factoryName) :
                new ObjectParameter("FactoryName", typeof(string));
    
            var factoryLocationParameter = factoryLocation != null ?
                new ObjectParameter("FactoryLocation", factoryLocation) :
                new ObjectParameter("FactoryLocation", typeof(string));
    
            var mixerNumberParameter = mixerNumber != null ?
                new ObjectParameter("MixerNumber", mixerNumber) :
                new ObjectParameter("MixerNumber", typeof(string));
    
            var visitNumberParameter = visitNumber.HasValue ?
                new ObjectParameter("VisitNumber", visitNumber) :
                new ObjectParameter("VisitNumber", typeof(long));
    
            var sampleNumberParameter = sampleNumber.HasValue ?
                new ObjectParameter("SampleNumber", sampleNumber) :
                new ObjectParameter("SampleNumber", typeof(long));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var visitLocationParameter = visitLocation != null ?
                new ObjectParameter("VisitLocation", visitLocation) :
                new ObjectParameter("VisitLocation", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var concreteRankParameter = concreteRank != null ?
                new ObjectParameter("ConcreteRank", concreteRank) :
                new ObjectParameter("ConcreteRank", typeof(string));
    
            var concreteTempertureParameter = concreteTemperture.HasValue ?
                new ObjectParameter("ConcreteTemperture", concreteTemperture) :
                new ObjectParameter("ConcreteTemperture", typeof(double));
    
            var waterTemperatureParameter = waterTemperature.HasValue ?
                new ObjectParameter("WaterTemperature", waterTemperature) :
                new ObjectParameter("WaterTemperature", typeof(double));
    
            var weatherTempertureParameter = weatherTemperture.HasValue ?
                new ObjectParameter("WeatherTemperture", weatherTemperture) :
                new ObjectParameter("WeatherTemperture", typeof(double));
    
            var downAmountParameter = downAmount.HasValue ?
                new ObjectParameter("DownAmount", downAmount) :
                new ObjectParameter("DownAmount", typeof(double));
    
            var cementTypeParameter = cementType != null ?
                new ObjectParameter("CementType", cementType) :
                new ObjectParameter("CementType", typeof(string));
    
            var cementSourceParameter = cementSource != null ?
                new ObjectParameter("CementSource", cementSource) :
                new ObjectParameter("CementSource", typeof(string));
    
            var additionTypeParameter = additionType != null ?
                new ObjectParameter("AdditionType", additionType) :
                new ObjectParameter("AdditionType", typeof(string));
    
            var additionAmountParameter = additionAmount.HasValue ?
                new ObjectParameter("AdditionAmount", additionAmount) :
                new ObjectParameter("AdditionAmount", typeof(double));
    
            var cementWeightParameter = cementWeight.HasValue ?
                new ObjectParameter("CementWeight", cementWeight) :
                new ObjectParameter("CementWeight", typeof(double));
    
            var waterWieghtParameter = waterWieght.HasValue ?
                new ObjectParameter("WaterWieght", waterWieght) :
                new ObjectParameter("WaterWieght", typeof(double));
    
            var washedSandWeightParameter = washedSandWeight.HasValue ?
                new ObjectParameter("WashedSandWeight", washedSandWeight) :
                new ObjectParameter("WashedSandWeight", typeof(double));
    
            var whiteSandWeightParameter = whiteSandWeight.HasValue ?
                new ObjectParameter("WhiteSandWeight", whiteSandWeight) :
                new ObjectParameter("WhiteSandWeight", typeof(double));
    
            var rubble3by4Parameter = rubble3by4.HasValue ?
                new ObjectParameter("Rubble3by4", rubble3by4) :
                new ObjectParameter("Rubble3by4", typeof(double));
    
            var rubble3by8Parameter = rubble3by8.HasValue ?
                new ObjectParameter("Rubble3by8", rubble3by8) :
                new ObjectParameter("Rubble3by8", typeof(double));
    
            var isCleanUsageParameter = isCleanUsage.HasValue ?
                new ObjectParameter("IsCleanUsage", isCleanUsage) :
                new ObjectParameter("IsCleanUsage", typeof(bool));
    
            var isBasicUsageParameter = isBasicUsage.HasValue ?
                new ObjectParameter("IsBasicUsage", isBasicUsage) :
                new ObjectParameter("IsBasicUsage", typeof(bool));
    
            var isColumnUsageParameter = isColumnUsage.HasValue ?
                new ObjectParameter("IsColumnUsage", isColumnUsage) :
                new ObjectParameter("IsColumnUsage", typeof(bool));
    
            var isRoofUsageParameter = isRoofUsage.HasValue ?
                new ObjectParameter("IsRoofUsage", isRoofUsage) :
                new ObjectParameter("IsRoofUsage", typeof(bool));
    
            var isOtherUsageParameter = isOtherUsage.HasValue ?
                new ObjectParameter("IsOtherUsage", isOtherUsage) :
                new ObjectParameter("IsOtherUsage", typeof(bool));
    
            var isCleanLocationParameter = isCleanLocation.HasValue ?
                new ObjectParameter("IsCleanLocation", isCleanLocation) :
                new ObjectParameter("IsCleanLocation", typeof(bool));
    
            var cleanDocParameter = cleanDoc != null ?
                new ObjectParameter("CleanDoc", cleanDoc) :
                new ObjectParameter("CleanDoc", typeof(string));
    
            var isDustControlInStationParameter = isDustControlInStation.HasValue ?
                new ObjectParameter("IsDustControlInStation", isDustControlInStation) :
                new ObjectParameter("IsDustControlInStation", typeof(bool));
    
            var dustDocParameter = dustDoc != null ?
                new ObjectParameter("DustDoc", dustDoc) :
                new ObjectParameter("DustDoc", typeof(string));
    
            var isRokamSummerParameter = isRokamSummer.HasValue ?
                new ObjectParameter("IsRokamSummer", isRokamSummer) :
                new ObjectParameter("IsRokamSummer", typeof(bool));
    
            var summerDocParameter = summerDoc != null ?
                new ObjectParameter("SummerDoc", summerDoc) :
                new ObjectParameter("SummerDoc", typeof(string));
    
            var isLabEngineerParameter = isLabEngineer.HasValue ?
                new ObjectParameter("IsLabEngineer", isLabEngineer) :
                new ObjectParameter("IsLabEngineer", typeof(bool));
    
            var labDocParameter = labDoc != null ?
                new ObjectParameter("LabDoc", labDoc) :
                new ObjectParameter("LabDoc", typeof(string));
    
            var isMoldanatInTrucksParameter = isMoldanatInTrucks.HasValue ?
                new ObjectParameter("IsMoldanatInTrucks", isMoldanatInTrucks) :
                new ObjectParameter("IsMoldanatInTrucks", typeof(bool));
    
            var truckDocParameter = truckDoc != null ?
                new ObjectParameter("TruckDoc", truckDoc) :
                new ObjectParameter("TruckDoc", typeof(string));
    
            var isPeopleSaftyParameter = isPeopleSafty.HasValue ?
                new ObjectParameter("IsPeopleSafty", isPeopleSafty) :
                new ObjectParameter("IsPeopleSafty", typeof(bool));
    
            var safteyDocParameter = safteyDoc != null ?
                new ObjectParameter("SafteyDoc", safteyDoc) :
                new ObjectParameter("SafteyDoc", typeof(string));
    
            var sampledByParameter = sampledBy.HasValue ?
                new ObjectParameter("SampledBy", sampledBy) :
                new ObjectParameter("SampledBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var invoicePhotoParameter = invoicePhoto != null ?
                new ObjectParameter("InvoicePhoto", invoicePhoto) :
                new ObjectParameter("InvoicePhoto", typeof(string));
    
            var cleanNoteParameter = cleanNote != null ?
                new ObjectParameter("CleanNote", cleanNote) :
                new ObjectParameter("CleanNote", typeof(string));
    
            var dustNoteParameter = dustNote != null ?
                new ObjectParameter("DustNote", dustNote) :
                new ObjectParameter("DustNote", typeof(string));
    
            var summerNoteParameter = summerNote != null ?
                new ObjectParameter("SummerNote", summerNote) :
                new ObjectParameter("SummerNote", typeof(string));
    
            var labNoteParameter = labNote != null ?
                new ObjectParameter("LabNote", labNote) :
                new ObjectParameter("LabNote", typeof(string));
    
            var truckNoteParameter = truckNote != null ?
                new ObjectParameter("TruckNote", truckNote) :
                new ObjectParameter("TruckNote", typeof(string));
    
            var safteyNoteParameter = safteyNote != null ?
                new ObjectParameter("SafteyNote", safteyNote) :
                new ObjectParameter("SafteyNote", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateConcreteSample1", reportNoParameter, reportDateParameter, factoryNameParameter, factoryLocationParameter, mixerNumberParameter, visitNumberParameter, sampleNumberParameter, truckNumberParameter, invoiceNumberParameter, clientNameParameter, visitLocationParameter, latitudeParameter, longitudeParameter, concreteRankParameter, concreteTempertureParameter, waterTemperatureParameter, weatherTempertureParameter, downAmountParameter, cementTypeParameter, cementSourceParameter, additionTypeParameter, additionAmountParameter, cementWeightParameter, waterWieghtParameter, washedSandWeightParameter, whiteSandWeightParameter, rubble3by4Parameter, rubble3by8Parameter, isCleanUsageParameter, isBasicUsageParameter, isColumnUsageParameter, isRoofUsageParameter, isOtherUsageParameter, isCleanLocationParameter, cleanDocParameter, isDustControlInStationParameter, dustDocParameter, isRokamSummerParameter, summerDocParameter, isLabEngineerParameter, labDocParameter, isMoldanatInTrucksParameter, truckDocParameter, isPeopleSaftyParameter, safteyDocParameter, sampledByParameter, createdDateParameter, statusCode, statusMessage, invoicePhotoParameter, cleanNoteParameter, dustNoteParameter, summerNoteParameter, labNoteParameter, truckNoteParameter, safteyNoteParameter, otherReasonParameter);
        }
    
        public virtual int AddUpdateFactory1(Nullable<int> id, string name, string type, Nullable<double> productionCapacity, Nullable<double> dailyProductionRate, Nullable<int> numberofMixers, Nullable<int> numberofTrucks, string phoneNumber, string faxNumber, string mailBox, string eMail, string status, Nullable<double> latitude, Nullable<double> longitude, string location, string ownerName, string ownerEmail, string ownerPhoneNumber, string managerName, string managerEmail, string managerPhoneNumber, string managerExperience, string engineerName, string engineerEmail, string engineerPhoneNumber, string engineerExperience, string comments, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            var productionCapacityParameter = productionCapacity.HasValue ?
                new ObjectParameter("ProductionCapacity", productionCapacity) :
                new ObjectParameter("ProductionCapacity", typeof(double));
    
            var dailyProductionRateParameter = dailyProductionRate.HasValue ?
                new ObjectParameter("DailyProductionRate", dailyProductionRate) :
                new ObjectParameter("DailyProductionRate", typeof(double));
    
            var numberofMixersParameter = numberofMixers.HasValue ?
                new ObjectParameter("NumberofMixers", numberofMixers) :
                new ObjectParameter("NumberofMixers", typeof(int));
    
            var numberofTrucksParameter = numberofTrucks.HasValue ?
                new ObjectParameter("NumberofTrucks", numberofTrucks) :
                new ObjectParameter("NumberofTrucks", typeof(int));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var faxNumberParameter = faxNumber != null ?
                new ObjectParameter("FaxNumber", faxNumber) :
                new ObjectParameter("FaxNumber", typeof(string));
    
            var mailBoxParameter = mailBox != null ?
                new ObjectParameter("MailBox", mailBox) :
                new ObjectParameter("MailBox", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var locationParameter = location != null ?
                new ObjectParameter("Location", location) :
                new ObjectParameter("Location", typeof(string));
    
            var ownerNameParameter = ownerName != null ?
                new ObjectParameter("OwnerName", ownerName) :
                new ObjectParameter("OwnerName", typeof(string));
    
            var ownerEmailParameter = ownerEmail != null ?
                new ObjectParameter("OwnerEmail", ownerEmail) :
                new ObjectParameter("OwnerEmail", typeof(string));
    
            var ownerPhoneNumberParameter = ownerPhoneNumber != null ?
                new ObjectParameter("OwnerPhoneNumber", ownerPhoneNumber) :
                new ObjectParameter("OwnerPhoneNumber", typeof(string));
    
            var managerNameParameter = managerName != null ?
                new ObjectParameter("ManagerName", managerName) :
                new ObjectParameter("ManagerName", typeof(string));
    
            var managerEmailParameter = managerEmail != null ?
                new ObjectParameter("ManagerEmail", managerEmail) :
                new ObjectParameter("ManagerEmail", typeof(string));
    
            var managerPhoneNumberParameter = managerPhoneNumber != null ?
                new ObjectParameter("ManagerPhoneNumber", managerPhoneNumber) :
                new ObjectParameter("ManagerPhoneNumber", typeof(string));
    
            var managerExperienceParameter = managerExperience != null ?
                new ObjectParameter("ManagerExperience", managerExperience) :
                new ObjectParameter("ManagerExperience", typeof(string));
    
            var engineerNameParameter = engineerName != null ?
                new ObjectParameter("EngineerName", engineerName) :
                new ObjectParameter("EngineerName", typeof(string));
    
            var engineerEmailParameter = engineerEmail != null ?
                new ObjectParameter("EngineerEmail", engineerEmail) :
                new ObjectParameter("EngineerEmail", typeof(string));
    
            var engineerPhoneNumberParameter = engineerPhoneNumber != null ?
                new ObjectParameter("EngineerPhoneNumber", engineerPhoneNumber) :
                new ObjectParameter("EngineerPhoneNumber", typeof(string));
    
            var engineerExperienceParameter = engineerExperience != null ?
                new ObjectParameter("EngineerExperience", engineerExperience) :
                new ObjectParameter("EngineerExperience", typeof(string));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateFactory1", idParameter, nameParameter, typeParameter, productionCapacityParameter, dailyProductionRateParameter, numberofMixersParameter, numberofTrucksParameter, phoneNumberParameter, faxNumberParameter, mailBoxParameter, eMailParameter, statusParameter, latitudeParameter, longitudeParameter, locationParameter, ownerNameParameter, ownerEmailParameter, ownerPhoneNumberParameter, managerNameParameter, managerEmailParameter, managerPhoneNumberParameter, managerExperienceParameter, engineerNameParameter, engineerEmailParameter, engineerPhoneNumberParameter, engineerExperienceParameter, commentsParameter, isActiveParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateUser1(Nullable<int> id, string fullName, string phoneNumber, string address, string eMail, string username, string password, byte[] photo, string jobTitle, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<System.DateTime> createdDate, Nullable<int> updatedBy, Nullable<System.DateTime> updatedDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var fullNameParameter = fullName != null ?
                new ObjectParameter("FullName", fullName) :
                new ObjectParameter("FullName", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var eMailParameter = eMail != null ?
                new ObjectParameter("EMail", eMail) :
                new ObjectParameter("EMail", typeof(string));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var photoParameter = photo != null ?
                new ObjectParameter("Photo", photo) :
                new ObjectParameter("Photo", typeof(byte[]));
    
            var jobTitleParameter = jobTitle != null ?
                new ObjectParameter("JobTitle", jobTitle) :
                new ObjectParameter("JobTitle", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var updatedByParameter = updatedBy.HasValue ?
                new ObjectParameter("UpdatedBy", updatedBy) :
                new ObjectParameter("UpdatedBy", typeof(int));
    
            var updatedDateParameter = updatedDate.HasValue ?
                new ObjectParameter("UpdatedDate", updatedDate) :
                new ObjectParameter("UpdatedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateUser1", idParameter, fullNameParameter, phoneNumberParameter, addressParameter, eMailParameter, usernameParameter, passwordParameter, photoParameter, jobTitleParameter, isActiveParameter, createdByParameter, createdDateParameter, updatedByParameter, updatedDateParameter, statusCode, statusMessage);
        }
    
        public virtual int AddUpdateVisit1(Nullable<long> id, Nullable<long> factoryId, Nullable<long> monitorId, Nullable<System.DateTime> visitDate, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(long));
    
            var monitorIdParameter = monitorId.HasValue ?
                new ObjectParameter("MonitorId", monitorId) :
                new ObjectParameter("MonitorId", typeof(long));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddUpdateVisit1", idParameter, factoryIdParameter, monitorIdParameter, visitDateParameter, statusCode, statusMessage);
        }
    
        public virtual ObjectResult<AsphaltInsepector1_Result> AsphaltInsepector1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsphaltInsepector1_Result>("AsphaltInsepector1");
        }
    
        public virtual ObjectResult<AsphaltInsepectorManager1_Result> AsphaltInsepectorManager1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsphaltInsepectorManager1_Result>("AsphaltInsepectorManager1");
        }
    
        public virtual ObjectResult<AsphaltReceptionMarshalSamples1_Result> AsphaltReceptionMarshalSamples1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AsphaltReceptionMarshalSamples1_Result>("AsphaltReceptionMarshalSamples1");
        }
    
        public virtual ObjectResult<string> aspnet_AnyDataInTables1(Nullable<int> tablesToCheck)
        {
            var tablesToCheckParameter = tablesToCheck.HasValue ?
                new ObjectParameter("TablesToCheck", tablesToCheck) :
                new ObjectParameter("TablesToCheck", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_AnyDataInTables1", tablesToCheckParameter);
        }
    
        public virtual int aspnet_Applications_CreateApplication1(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Applications_CreateApplication1", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_CheckSchemaVersion1(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_CheckSchemaVersion1", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Membership_ChangePasswordQuestionAndAnswer1(string applicationName, string userName, string newPasswordQuestion, string newPasswordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordQuestionParameter = newPasswordQuestion != null ?
                new ObjectParameter("NewPasswordQuestion", newPasswordQuestion) :
                new ObjectParameter("NewPasswordQuestion", typeof(string));
    
            var newPasswordAnswerParameter = newPasswordAnswer != null ?
                new ObjectParameter("NewPasswordAnswer", newPasswordAnswer) :
                new ObjectParameter("NewPasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ChangePasswordQuestionAndAnswer1", applicationNameParameter, userNameParameter, newPasswordQuestionParameter, newPasswordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_CreateUser1(string applicationName, string userName, string password, string passwordSalt, string email, string passwordQuestion, string passwordAnswer, Nullable<bool> isApproved, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> createDate, Nullable<int> uniqueEmail, Nullable<int> passwordFormat, ObjectParameter userId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordQuestionParameter = passwordQuestion != null ?
                new ObjectParameter("PasswordQuestion", passwordQuestion) :
                new ObjectParameter("PasswordQuestion", typeof(string));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var createDateParameter = createDate.HasValue ?
                new ObjectParameter("CreateDate", createDate) :
                new ObjectParameter("CreateDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_CreateUser1", applicationNameParameter, userNameParameter, passwordParameter, passwordSaltParameter, emailParameter, passwordQuestionParameter, passwordAnswerParameter, isApprovedParameter, currentTimeUtcParameter, createDateParameter, uniqueEmailParameter, passwordFormatParameter, userId);
        }
    
        public virtual int aspnet_Membership_FindUsersByEmail1(string applicationName, string emailToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailToMatchParameter = emailToMatch != null ?
                new ObjectParameter("EmailToMatch", emailToMatch) :
                new ObjectParameter("EmailToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByEmail1", applicationNameParameter, emailToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_FindUsersByName1(string applicationName, string userNameToMatch, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_FindUsersByName1", applicationNameParameter, userNameToMatchParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetAllUsers1(string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetAllUsers1", applicationNameParameter, pageIndexParameter, pageSizeParameter);
        }
    
        public virtual int aspnet_Membership_GetNumberOfUsersOnline1(string applicationName, Nullable<int> minutesSinceLastInActive, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var minutesSinceLastInActiveParameter = minutesSinceLastInActive.HasValue ?
                new ObjectParameter("MinutesSinceLastInActive", minutesSinceLastInActive) :
                new ObjectParameter("MinutesSinceLastInActive", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_GetNumberOfUsersOnline1", applicationNameParameter, minutesSinceLastInActiveParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPassword1_Result> aspnet_Membership_GetPassword1(string applicationName, string userName, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPassword1_Result>("aspnet_Membership_GetPassword1", applicationNameParameter, userNameParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, passwordAnswerParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetPasswordWithFormat1_Result> aspnet_Membership_GetPasswordWithFormat1(string applicationName, string userName, Nullable<bool> updateLastLoginActivityDate, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetPasswordWithFormat1_Result>("aspnet_Membership_GetPasswordWithFormat1", applicationNameParameter, userNameParameter, updateLastLoginActivityDateParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Membership_GetUserByEmail1(string applicationName, string email)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Membership_GetUserByEmail1", applicationNameParameter, emailParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByName1_Result> aspnet_Membership_GetUserByName1(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByName1_Result>("aspnet_Membership_GetUserByName1", applicationNameParameter, userNameParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual ObjectResult<aspnet_Membership_GetUserByUserId1_Result> aspnet_Membership_GetUserByUserId1(Nullable<System.Guid> userId, Nullable<System.DateTime> currentTimeUtc, Nullable<bool> updateLastActivity)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(System.Guid));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var updateLastActivityParameter = updateLastActivity.HasValue ?
                new ObjectParameter("UpdateLastActivity", updateLastActivity) :
                new ObjectParameter("UpdateLastActivity", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Membership_GetUserByUserId1_Result>("aspnet_Membership_GetUserByUserId1", userIdParameter, currentTimeUtcParameter, updateLastActivityParameter);
        }
    
        public virtual int aspnet_Membership_ResetPassword1(string applicationName, string userName, string newPassword, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat, string passwordAnswer)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            var passwordAnswerParameter = passwordAnswer != null ?
                new ObjectParameter("PasswordAnswer", passwordAnswer) :
                new ObjectParameter("PasswordAnswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_ResetPassword1", applicationNameParameter, userNameParameter, newPasswordParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter, passwordAnswerParameter);
        }
    
        public virtual int aspnet_Membership_SetPassword1(string applicationName, string userName, string newPassword, string passwordSalt, Nullable<System.DateTime> currentTimeUtc, Nullable<int> passwordFormat)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            var passwordSaltParameter = passwordSalt != null ?
                new ObjectParameter("PasswordSalt", passwordSalt) :
                new ObjectParameter("PasswordSalt", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var passwordFormatParameter = passwordFormat.HasValue ?
                new ObjectParameter("PasswordFormat", passwordFormat) :
                new ObjectParameter("PasswordFormat", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_SetPassword1", applicationNameParameter, userNameParameter, newPasswordParameter, passwordSaltParameter, currentTimeUtcParameter, passwordFormatParameter);
        }
    
        public virtual int aspnet_Membership_UnlockUser1(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UnlockUser1", applicationNameParameter, userNameParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUser1(string applicationName, string userName, string email, string comment, Nullable<bool> isApproved, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate, Nullable<int> uniqueEmail, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var commentParameter = comment != null ?
                new ObjectParameter("Comment", comment) :
                new ObjectParameter("Comment", typeof(string));
    
            var isApprovedParameter = isApproved.HasValue ?
                new ObjectParameter("IsApproved", isApproved) :
                new ObjectParameter("IsApproved", typeof(bool));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            var uniqueEmailParameter = uniqueEmail.HasValue ?
                new ObjectParameter("UniqueEmail", uniqueEmail) :
                new ObjectParameter("UniqueEmail", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUser1", applicationNameParameter, userNameParameter, emailParameter, commentParameter, isApprovedParameter, lastLoginDateParameter, lastActivityDateParameter, uniqueEmailParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Membership_UpdateUserInfo1(string applicationName, string userName, Nullable<bool> isPasswordCorrect, Nullable<bool> updateLastLoginActivityDate, Nullable<int> maxInvalidPasswordAttempts, Nullable<int> passwordAttemptWindow, Nullable<System.DateTime> currentTimeUtc, Nullable<System.DateTime> lastLoginDate, Nullable<System.DateTime> lastActivityDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isPasswordCorrectParameter = isPasswordCorrect.HasValue ?
                new ObjectParameter("IsPasswordCorrect", isPasswordCorrect) :
                new ObjectParameter("IsPasswordCorrect", typeof(bool));
    
            var updateLastLoginActivityDateParameter = updateLastLoginActivityDate.HasValue ?
                new ObjectParameter("UpdateLastLoginActivityDate", updateLastLoginActivityDate) :
                new ObjectParameter("UpdateLastLoginActivityDate", typeof(bool));
    
            var maxInvalidPasswordAttemptsParameter = maxInvalidPasswordAttempts.HasValue ?
                new ObjectParameter("MaxInvalidPasswordAttempts", maxInvalidPasswordAttempts) :
                new ObjectParameter("MaxInvalidPasswordAttempts", typeof(int));
    
            var passwordAttemptWindowParameter = passwordAttemptWindow.HasValue ?
                new ObjectParameter("PasswordAttemptWindow", passwordAttemptWindow) :
                new ObjectParameter("PasswordAttemptWindow", typeof(int));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            var lastLoginDateParameter = lastLoginDate.HasValue ?
                new ObjectParameter("LastLoginDate", lastLoginDate) :
                new ObjectParameter("LastLoginDate", typeof(System.DateTime));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Membership_UpdateUserInfo1", applicationNameParameter, userNameParameter, isPasswordCorrectParameter, updateLastLoginActivityDateParameter, maxInvalidPasswordAttemptsParameter, passwordAttemptWindowParameter, currentTimeUtcParameter, lastLoginDateParameter, lastActivityDateParameter);
        }
    
        public virtual int aspnet_Paths_CreatePath1(Nullable<System.Guid> applicationId, string path, ObjectParameter pathId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Paths_CreatePath1", applicationIdParameter, pathParameter, pathId);
        }
    
        public virtual int aspnet_Personalization_GetApplicationId1(string applicationName, ObjectParameter applicationId)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Personalization_GetApplicationId1", applicationNameParameter, applicationId);
        }
    
        public virtual int aspnet_PersonalizationAdministration_DeleteAllState1(Nullable<bool> allUsersScope, string applicationName, ObjectParameter count)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_DeleteAllState1", allUsersScopeParameter, applicationNameParameter, count);
        }
    
        public virtual int aspnet_PersonalizationAdministration_FindState1(Nullable<bool> allUsersScope, string applicationName, Nullable<int> pageIndex, Nullable<int> pageSize, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_FindState1", allUsersScopeParameter, applicationNameParameter, pageIndexParameter, pageSizeParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_GetCountOfState1(ObjectParameter count, Nullable<bool> allUsersScope, string applicationName, string path, string userName, Nullable<System.DateTime> inactiveSinceDate)
        {
            var allUsersScopeParameter = allUsersScope.HasValue ?
                new ObjectParameter("AllUsersScope", allUsersScope) :
                new ObjectParameter("AllUsersScope", typeof(bool));
    
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_GetCountOfState1", count, allUsersScopeParameter, applicationNameParameter, pathParameter, userNameParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetSharedState1(ObjectParameter count, string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetSharedState1", count, applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAdministration_ResetUserState1(ObjectParameter count, string applicationName, Nullable<System.DateTime> inactiveSinceDate, string userName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAdministration_ResetUserState1", count, applicationNameParameter, inactiveSinceDateParameter, userNameParameter, pathParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationAllUsers_GetPageSettings1(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationAllUsers_GetPageSettings1", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_ResetPageSettings1(string applicationName, string path)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_ResetPageSettings1", applicationNameParameter, pathParameter);
        }
    
        public virtual int aspnet_PersonalizationAllUsers_SetPageSettings1(string applicationName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationAllUsers_SetPageSettings1", applicationNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<byte[]> aspnet_PersonalizationPerUser_GetPageSettings1(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("aspnet_PersonalizationPerUser_GetPageSettings1", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_ResetPageSettings1(string applicationName, string userName, string path, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_ResetPageSettings1", applicationNameParameter, userNameParameter, pathParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_PersonalizationPerUser_SetPageSettings1(string applicationName, string userName, string path, byte[] pageSettings, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var pageSettingsParameter = pageSettings != null ?
                new ObjectParameter("PageSettings", pageSettings) :
                new ObjectParameter("PageSettings", typeof(byte[]));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_PersonalizationPerUser_SetPageSettings1", applicationNameParameter, userNameParameter, pathParameter, pageSettingsParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteInactiveProfiles1(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteInactiveProfiles1", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_DeleteProfiles1(string applicationName, string userNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_DeleteProfiles1", applicationNameParameter, userNamesParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> aspnet_Profile_GetNumberOfInactiveProfiles1(string applicationName, Nullable<int> profileAuthOptions, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("aspnet_Profile_GetNumberOfInactiveProfiles1", applicationNameParameter, profileAuthOptionsParameter, inactiveSinceDateParameter);
        }
    
        public virtual int aspnet_Profile_GetProfiles1(string applicationName, Nullable<int> profileAuthOptions, Nullable<int> pageIndex, Nullable<int> pageSize, string userNameToMatch, Nullable<System.DateTime> inactiveSinceDate)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var profileAuthOptionsParameter = profileAuthOptions.HasValue ?
                new ObjectParameter("ProfileAuthOptions", profileAuthOptions) :
                new ObjectParameter("ProfileAuthOptions", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            var inactiveSinceDateParameter = inactiveSinceDate.HasValue ?
                new ObjectParameter("InactiveSinceDate", inactiveSinceDate) :
                new ObjectParameter("InactiveSinceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_GetProfiles1", applicationNameParameter, profileAuthOptionsParameter, pageIndexParameter, pageSizeParameter, userNameToMatchParameter, inactiveSinceDateParameter);
        }
    
        public virtual ObjectResult<aspnet_Profile_GetProperties1_Result> aspnet_Profile_GetProperties1(string applicationName, string userName, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_Profile_GetProperties1_Result>("aspnet_Profile_GetProperties1", applicationNameParameter, userNameParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_Profile_SetProperties1(string applicationName, string propertyNames, string propertyValuesString, byte[] propertyValuesBinary, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var propertyNamesParameter = propertyNames != null ?
                new ObjectParameter("PropertyNames", propertyNames) :
                new ObjectParameter("PropertyNames", typeof(string));
    
            var propertyValuesStringParameter = propertyValuesString != null ?
                new ObjectParameter("PropertyValuesString", propertyValuesString) :
                new ObjectParameter("PropertyValuesString", typeof(string));
    
            var propertyValuesBinaryParameter = propertyValuesBinary != null ?
                new ObjectParameter("PropertyValuesBinary", propertyValuesBinary) :
                new ObjectParameter("PropertyValuesBinary", typeof(byte[]));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Profile_SetProperties1", applicationNameParameter, propertyNamesParameter, propertyValuesStringParameter, propertyValuesBinaryParameter, userNameParameter, isUserAnonymousParameter, currentTimeUtcParameter);
        }
    
        public virtual int aspnet_RegisterSchemaVersion1(string feature, string compatibleSchemaVersion, Nullable<bool> isCurrentVersion, Nullable<bool> removeIncompatibleSchema)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            var isCurrentVersionParameter = isCurrentVersion.HasValue ?
                new ObjectParameter("IsCurrentVersion", isCurrentVersion) :
                new ObjectParameter("IsCurrentVersion", typeof(bool));
    
            var removeIncompatibleSchemaParameter = removeIncompatibleSchema.HasValue ?
                new ObjectParameter("RemoveIncompatibleSchema", removeIncompatibleSchema) :
                new ObjectParameter("RemoveIncompatibleSchema", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_RegisterSchemaVersion1", featureParameter, compatibleSchemaVersionParameter, isCurrentVersionParameter, removeIncompatibleSchemaParameter);
        }
    
        public virtual int aspnet_Roles_CreateRole1(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_CreateRole1", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Roles_DeleteRole1(string applicationName, string roleName, Nullable<bool> deleteOnlyIfRoleIsEmpty)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var deleteOnlyIfRoleIsEmptyParameter = deleteOnlyIfRoleIsEmpty.HasValue ?
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", deleteOnlyIfRoleIsEmpty) :
                new ObjectParameter("DeleteOnlyIfRoleIsEmpty", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_DeleteRole1", applicationNameParameter, roleNameParameter, deleteOnlyIfRoleIsEmptyParameter);
        }
    
        public virtual ObjectResult<string> aspnet_Roles_GetAllRoles1(string applicationName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_Roles_GetAllRoles1", applicationNameParameter);
        }
    
        public virtual int aspnet_Roles_RoleExists1(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Roles_RoleExists1", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_Setup_RemoveAllRoleMembers1(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RemoveAllRoleMembers1", nameParameter);
        }
    
        public virtual int aspnet_Setup_RestorePermissions1(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Setup_RestorePermissions1", nameParameter);
        }
    
        public virtual int aspnet_UnRegisterSchemaVersion1(string feature, string compatibleSchemaVersion)
        {
            var featureParameter = feature != null ?
                new ObjectParameter("Feature", feature) :
                new ObjectParameter("Feature", typeof(string));
    
            var compatibleSchemaVersionParameter = compatibleSchemaVersion != null ?
                new ObjectParameter("CompatibleSchemaVersion", compatibleSchemaVersion) :
                new ObjectParameter("CompatibleSchemaVersion", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UnRegisterSchemaVersion1", featureParameter, compatibleSchemaVersionParameter);
        }
    
        public virtual int aspnet_Users_CreateUser1(Nullable<System.Guid> applicationId, string userName, Nullable<bool> isUserAnonymous, Nullable<System.DateTime> lastActivityDate, ObjectParameter userId)
        {
            var applicationIdParameter = applicationId.HasValue ?
                new ObjectParameter("ApplicationId", applicationId) :
                new ObjectParameter("ApplicationId", typeof(System.Guid));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var isUserAnonymousParameter = isUserAnonymous.HasValue ?
                new ObjectParameter("IsUserAnonymous", isUserAnonymous) :
                new ObjectParameter("IsUserAnonymous", typeof(bool));
    
            var lastActivityDateParameter = lastActivityDate.HasValue ?
                new ObjectParameter("LastActivityDate", lastActivityDate) :
                new ObjectParameter("LastActivityDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_CreateUser1", applicationIdParameter, userNameParameter, isUserAnonymousParameter, lastActivityDateParameter, userId);
        }
    
        public virtual int aspnet_Users_DeleteUser1(string applicationName, string userName, Nullable<int> tablesToDeleteFrom, ObjectParameter numTablesDeletedFrom)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var tablesToDeleteFromParameter = tablesToDeleteFrom.HasValue ?
                new ObjectParameter("TablesToDeleteFrom", tablesToDeleteFrom) :
                new ObjectParameter("TablesToDeleteFrom", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_Users_DeleteUser1", applicationNameParameter, userNameParameter, tablesToDeleteFromParameter, numTablesDeletedFrom);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_AddUsersToRoles1(string applicationName, string userNames, string roleNames, Nullable<System.DateTime> currentTimeUtc)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            var currentTimeUtcParameter = currentTimeUtc.HasValue ?
                new ObjectParameter("CurrentTimeUtc", currentTimeUtc) :
                new ObjectParameter("CurrentTimeUtc", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_AddUsersToRoles1", applicationNameParameter, userNamesParameter, roleNamesParameter, currentTimeUtcParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_FindUsersInRole1(string applicationName, string roleName, string userNameToMatch)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            var userNameToMatchParameter = userNameToMatch != null ?
                new ObjectParameter("UserNameToMatch", userNameToMatch) :
                new ObjectParameter("UserNameToMatch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_FindUsersInRole1", applicationNameParameter, roleNameParameter, userNameToMatchParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetRolesForUser1(string applicationName, string userName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetRolesForUser1", applicationNameParameter, userNameParameter);
        }
    
        public virtual ObjectResult<string> aspnet_UsersInRoles_GetUsersInRoles1(string applicationName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("aspnet_UsersInRoles_GetUsersInRoles1", applicationNameParameter, roleNameParameter);
        }
    
        public virtual int aspnet_UsersInRoles_IsUserInRole1(string applicationName, string userName, string roleName)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_UsersInRoles_IsUserInRole1", applicationNameParameter, userNameParameter, roleNameParameter);
        }
    
        public virtual ObjectResult<aspnet_UsersInRoles_RemoveUsersFromRoles1_Result> aspnet_UsersInRoles_RemoveUsersFromRoles1(string applicationName, string userNames, string roleNames)
        {
            var applicationNameParameter = applicationName != null ?
                new ObjectParameter("ApplicationName", applicationName) :
                new ObjectParameter("ApplicationName", typeof(string));
    
            var userNamesParameter = userNames != null ?
                new ObjectParameter("UserNames", userNames) :
                new ObjectParameter("UserNames", typeof(string));
    
            var roleNamesParameter = roleNames != null ?
                new ObjectParameter("RoleNames", roleNames) :
                new ObjectParameter("RoleNames", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<aspnet_UsersInRoles_RemoveUsersFromRoles1_Result>("aspnet_UsersInRoles_RemoveUsersFromRoles1", applicationNameParameter, userNamesParameter, roleNamesParameter);
        }
    
        public virtual int aspnet_WebEvent_LogEvent1(string eventId, Nullable<System.DateTime> eventTimeUtc, Nullable<System.DateTime> eventTime, string eventType, Nullable<decimal> eventSequence, Nullable<decimal> eventOccurrence, Nullable<int> eventCode, Nullable<int> eventDetailCode, string message, string applicationPath, string applicationVirtualPath, string machineName, string requestUrl, string exceptionType, string details)
        {
            var eventIdParameter = eventId != null ?
                new ObjectParameter("EventId", eventId) :
                new ObjectParameter("EventId", typeof(string));
    
            var eventTimeUtcParameter = eventTimeUtc.HasValue ?
                new ObjectParameter("EventTimeUtc", eventTimeUtc) :
                new ObjectParameter("EventTimeUtc", typeof(System.DateTime));
    
            var eventTimeParameter = eventTime.HasValue ?
                new ObjectParameter("EventTime", eventTime) :
                new ObjectParameter("EventTime", typeof(System.DateTime));
    
            var eventTypeParameter = eventType != null ?
                new ObjectParameter("EventType", eventType) :
                new ObjectParameter("EventType", typeof(string));
    
            var eventSequenceParameter = eventSequence.HasValue ?
                new ObjectParameter("EventSequence", eventSequence) :
                new ObjectParameter("EventSequence", typeof(decimal));
    
            var eventOccurrenceParameter = eventOccurrence.HasValue ?
                new ObjectParameter("EventOccurrence", eventOccurrence) :
                new ObjectParameter("EventOccurrence", typeof(decimal));
    
            var eventCodeParameter = eventCode.HasValue ?
                new ObjectParameter("EventCode", eventCode) :
                new ObjectParameter("EventCode", typeof(int));
    
            var eventDetailCodeParameter = eventDetailCode.HasValue ?
                new ObjectParameter("EventDetailCode", eventDetailCode) :
                new ObjectParameter("EventDetailCode", typeof(int));
    
            var messageParameter = message != null ?
                new ObjectParameter("Message", message) :
                new ObjectParameter("Message", typeof(string));
    
            var applicationPathParameter = applicationPath != null ?
                new ObjectParameter("ApplicationPath", applicationPath) :
                new ObjectParameter("ApplicationPath", typeof(string));
    
            var applicationVirtualPathParameter = applicationVirtualPath != null ?
                new ObjectParameter("ApplicationVirtualPath", applicationVirtualPath) :
                new ObjectParameter("ApplicationVirtualPath", typeof(string));
    
            var machineNameParameter = machineName != null ?
                new ObjectParameter("MachineName", machineName) :
                new ObjectParameter("MachineName", typeof(string));
    
            var requestUrlParameter = requestUrl != null ?
                new ObjectParameter("RequestUrl", requestUrl) :
                new ObjectParameter("RequestUrl", typeof(string));
    
            var exceptionTypeParameter = exceptionType != null ?
                new ObjectParameter("ExceptionType", exceptionType) :
                new ObjectParameter("ExceptionType", typeof(string));
    
            var detailsParameter = details != null ?
                new ObjectParameter("Details", details) :
                new ObjectParameter("Details", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("aspnet_WebEvent_LogEvent1", eventIdParameter, eventTimeUtcParameter, eventTimeParameter, eventTypeParameter, eventSequenceParameter, eventOccurrenceParameter, eventCodeParameter, eventDetailCodeParameter, messageParameter, applicationPathParameter, applicationVirtualPathParameter, machineNameParameter, requestUrlParameter, exceptionTypeParameter, detailsParameter);
        }
    
        public virtual ObjectResult<GetItemByFactoryYealy1_Result> GetItemByFactoryYealy1(Nullable<int> factoryId, Nullable<int> yEAR, string mixId)
        {
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(int));
    
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var mixIdParameter = mixId != null ?
                new ObjectParameter("MixId", mixId) :
                new ObjectParameter("MixId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemByFactoryYealy1_Result>("GetItemByFactoryYealy1", factoryIdParameter, yEARParameter, mixIdParameter);
        }
    
        public virtual ObjectResult<GetMixingDesignDetails1_Result> GetMixingDesignDetails1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMixingDesignDetails1_Result>("GetMixingDesignDetails1");
        }
    
        public virtual ObjectResult<GetrptConcreteSamplesResultsummary1_Result> GetrptConcreteSamplesResultsummary1(Nullable<int> yEAR, Nullable<int> factoryId)
        {
            var yEARParameter = yEAR.HasValue ?
                new ObjectParameter("YEAR", yEAR) :
                new ObjectParameter("YEAR", typeof(int));
    
            var factoryIdParameter = factoryId.HasValue ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetrptConcreteSamplesResultsummary1_Result>("GetrptConcreteSamplesResultsummary1", yEARParameter, factoryIdParameter);
        }
    
        public virtual ObjectResult<GetSuperPavChartForProject1_Result> GetSuperPavChartForProject1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSuperPavChartForProject1_Result>("GetSuperPavChartForProject1");
        }
    
        public virtual ObjectResult<MarshalJmfRecptionLst1_Result> MarshalJmfRecptionLst1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarshalJmfRecptionLst1_Result>("MarshalJmfRecptionLst1");
        }
    
        public virtual ObjectResult<MarshalJmfSupplierLst1_Result> MarshalJmfSupplierLst1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarshalJmfSupplierLst1_Result>("MarshalJmfSupplierLst1");
        }
    
        public virtual ObjectResult<MarshalJmfTesterLst1_Result> MarshalJmfTesterLst1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<MarshalJmfTesterLst1_Result>("MarshalJmfTesterLst1");
        }
    
        public virtual ObjectResult<ReceptionSamplesAsphaltSuperPave1_Result> ReceptionSamplesAsphaltSuperPave1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceptionSamplesAsphaltSuperPave1_Result>("ReceptionSamplesAsphaltSuperPave1");
        }
    
        public virtual ObjectResult<ReceptionSamplesSoil1_Result> ReceptionSamplesSoil1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceptionSamplesSoil1_Result>("ReceptionSamplesSoil1");
        }
    
        public virtual ObjectResult<selectClassificationByFact1_Result> selectClassificationByFact1(string factoryId, Nullable<int> clsYear)
        {
            var factoryIdParameter = factoryId != null ?
                new ObjectParameter("FactoryId", factoryId) :
                new ObjectParameter("FactoryId", typeof(string));
    
            var clsYearParameter = clsYear.HasValue ?
                new ObjectParameter("ClsYear", clsYear) :
                new ObjectParameter("ClsYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<selectClassificationByFact1_Result>("selectClassificationByFact1", factoryIdParameter, clsYearParameter);
        }
    
        public virtual ObjectResult<SoilInsepector1_Result> SoilInsepector1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilInsepector1_Result>("SoilInsepector1");
        }
    
        public virtual ObjectResult<SoilInsepectorManager1_Result> SoilInsepectorManager1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilInsepectorManager1_Result>("SoilInsepectorManager1");
        }
    
        public virtual ObjectResult<SoilSamplesCompaction1_Result> SoilSamplesCompaction1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilSamplesCompaction1_Result>("SoilSamplesCompaction1");
        }
    
        public virtual ObjectResult<SoilSummary1_Result> SoilSummary1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SoilSummary1_Result>("SoilSummary1");
        }
    
        public virtual ObjectResult<SuperPaveSamplesCompaction1_Result> SuperPaveSamplesCompaction1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SuperPaveSamplesCompaction1_Result>("SuperPaveSamplesCompaction1");
        }
    
        public virtual ObjectResult<SuperPaveSummary1_Result> SuperPaveSummary1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SuperPaveSummary1_Result>("SuperPaveSummary1");
        }
    
        public virtual int UpdateConcreteReport1(Nullable<long> sampleNumber, ObjectParameter statusCode, ObjectParameter statusMessage)
        {
            var sampleNumberParameter = sampleNumber.HasValue ?
                new ObjectParameter("SampleNumber", sampleNumber) :
                new ObjectParameter("SampleNumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConcreteReport1", sampleNumberParameter, statusCode, statusMessage);
        }
    
        public virtual int UpdateConcreteSample1(Nullable<long> reportNo, Nullable<System.DateTime> reportDate, string factoryName, string factoryLocation, string mixerNumber, Nullable<long> visitNumber, Nullable<long> sampleNumber, string truckNumber, string invoiceNumber, string clientName, string visitLocation, Nullable<double> latitude, Nullable<double> longitude, string concreteRank, Nullable<double> concreteTemperture, Nullable<double> waterTemperature, Nullable<double> weatherTemperture, Nullable<double> downAmount, string cementType, string cementSource, string additionType, Nullable<double> additionAmount, Nullable<double> cementWeight, Nullable<double> waterWieght, Nullable<double> washedSandWeight, Nullable<double> whiteSandWeight, Nullable<double> rubble3by4, Nullable<double> rubble3by8, Nullable<bool> isCleanUsage, Nullable<bool> isBasicUsage, Nullable<bool> isColumnUsage, Nullable<bool> isRoofUsage, Nullable<bool> isOtherUsage, Nullable<bool> isCleanLocation, string cleanDoc, Nullable<bool> isDustControlInStation, string dustDoc, Nullable<bool> isRokamSummer, string summerDoc, Nullable<bool> isLabEngineer, string labDoc, Nullable<bool> isMoldanatInTrucks, string truckDoc, Nullable<bool> isPeopleSafty, string safteyDoc, Nullable<int> sampledBy, Nullable<System.DateTime> createdDate, ObjectParameter statusCode, ObjectParameter statusMessage, string cleanNote, string dustNote, string summerNote, string labNote, string truckNote, string safteyNote, string otherReason)
        {
            var reportNoParameter = reportNo.HasValue ?
                new ObjectParameter("ReportNo", reportNo) :
                new ObjectParameter("ReportNo", typeof(long));
    
            var reportDateParameter = reportDate.HasValue ?
                new ObjectParameter("ReportDate", reportDate) :
                new ObjectParameter("ReportDate", typeof(System.DateTime));
    
            var factoryNameParameter = factoryName != null ?
                new ObjectParameter("FactoryName", factoryName) :
                new ObjectParameter("FactoryName", typeof(string));
    
            var factoryLocationParameter = factoryLocation != null ?
                new ObjectParameter("FactoryLocation", factoryLocation) :
                new ObjectParameter("FactoryLocation", typeof(string));
    
            var mixerNumberParameter = mixerNumber != null ?
                new ObjectParameter("MixerNumber", mixerNumber) :
                new ObjectParameter("MixerNumber", typeof(string));
    
            var visitNumberParameter = visitNumber.HasValue ?
                new ObjectParameter("VisitNumber", visitNumber) :
                new ObjectParameter("VisitNumber", typeof(long));
    
            var sampleNumberParameter = sampleNumber.HasValue ?
                new ObjectParameter("SampleNumber", sampleNumber) :
                new ObjectParameter("SampleNumber", typeof(long));
    
            var truckNumberParameter = truckNumber != null ?
                new ObjectParameter("TruckNumber", truckNumber) :
                new ObjectParameter("TruckNumber", typeof(string));
    
            var invoiceNumberParameter = invoiceNumber != null ?
                new ObjectParameter("InvoiceNumber", invoiceNumber) :
                new ObjectParameter("InvoiceNumber", typeof(string));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var visitLocationParameter = visitLocation != null ?
                new ObjectParameter("VisitLocation", visitLocation) :
                new ObjectParameter("VisitLocation", typeof(string));
    
            var latitudeParameter = latitude.HasValue ?
                new ObjectParameter("Latitude", latitude) :
                new ObjectParameter("Latitude", typeof(double));
    
            var longitudeParameter = longitude.HasValue ?
                new ObjectParameter("Longitude", longitude) :
                new ObjectParameter("Longitude", typeof(double));
    
            var concreteRankParameter = concreteRank != null ?
                new ObjectParameter("ConcreteRank", concreteRank) :
                new ObjectParameter("ConcreteRank", typeof(string));
    
            var concreteTempertureParameter = concreteTemperture.HasValue ?
                new ObjectParameter("ConcreteTemperture", concreteTemperture) :
                new ObjectParameter("ConcreteTemperture", typeof(double));
    
            var waterTemperatureParameter = waterTemperature.HasValue ?
                new ObjectParameter("WaterTemperature", waterTemperature) :
                new ObjectParameter("WaterTemperature", typeof(double));
    
            var weatherTempertureParameter = weatherTemperture.HasValue ?
                new ObjectParameter("WeatherTemperture", weatherTemperture) :
                new ObjectParameter("WeatherTemperture", typeof(double));
    
            var downAmountParameter = downAmount.HasValue ?
                new ObjectParameter("DownAmount", downAmount) :
                new ObjectParameter("DownAmount", typeof(double));
    
            var cementTypeParameter = cementType != null ?
                new ObjectParameter("CementType", cementType) :
                new ObjectParameter("CementType", typeof(string));
    
            var cementSourceParameter = cementSource != null ?
                new ObjectParameter("CementSource", cementSource) :
                new ObjectParameter("CementSource", typeof(string));
    
            var additionTypeParameter = additionType != null ?
                new ObjectParameter("AdditionType", additionType) :
                new ObjectParameter("AdditionType", typeof(string));
    
            var additionAmountParameter = additionAmount.HasValue ?
                new ObjectParameter("AdditionAmount", additionAmount) :
                new ObjectParameter("AdditionAmount", typeof(double));
    
            var cementWeightParameter = cementWeight.HasValue ?
                new ObjectParameter("CementWeight", cementWeight) :
                new ObjectParameter("CementWeight", typeof(double));
    
            var waterWieghtParameter = waterWieght.HasValue ?
                new ObjectParameter("WaterWieght", waterWieght) :
                new ObjectParameter("WaterWieght", typeof(double));
    
            var washedSandWeightParameter = washedSandWeight.HasValue ?
                new ObjectParameter("WashedSandWeight", washedSandWeight) :
                new ObjectParameter("WashedSandWeight", typeof(double));
    
            var whiteSandWeightParameter = whiteSandWeight.HasValue ?
                new ObjectParameter("WhiteSandWeight", whiteSandWeight) :
                new ObjectParameter("WhiteSandWeight", typeof(double));
    
            var rubble3by4Parameter = rubble3by4.HasValue ?
                new ObjectParameter("Rubble3by4", rubble3by4) :
                new ObjectParameter("Rubble3by4", typeof(double));
    
            var rubble3by8Parameter = rubble3by8.HasValue ?
                new ObjectParameter("Rubble3by8", rubble3by8) :
                new ObjectParameter("Rubble3by8", typeof(double));
    
            var isCleanUsageParameter = isCleanUsage.HasValue ?
                new ObjectParameter("IsCleanUsage", isCleanUsage) :
                new ObjectParameter("IsCleanUsage", typeof(bool));
    
            var isBasicUsageParameter = isBasicUsage.HasValue ?
                new ObjectParameter("IsBasicUsage", isBasicUsage) :
                new ObjectParameter("IsBasicUsage", typeof(bool));
    
            var isColumnUsageParameter = isColumnUsage.HasValue ?
                new ObjectParameter("IsColumnUsage", isColumnUsage) :
                new ObjectParameter("IsColumnUsage", typeof(bool));
    
            var isRoofUsageParameter = isRoofUsage.HasValue ?
                new ObjectParameter("IsRoofUsage", isRoofUsage) :
                new ObjectParameter("IsRoofUsage", typeof(bool));
    
            var isOtherUsageParameter = isOtherUsage.HasValue ?
                new ObjectParameter("IsOtherUsage", isOtherUsage) :
                new ObjectParameter("IsOtherUsage", typeof(bool));
    
            var isCleanLocationParameter = isCleanLocation.HasValue ?
                new ObjectParameter("IsCleanLocation", isCleanLocation) :
                new ObjectParameter("IsCleanLocation", typeof(bool));
    
            var cleanDocParameter = cleanDoc != null ?
                new ObjectParameter("CleanDoc", cleanDoc) :
                new ObjectParameter("CleanDoc", typeof(string));
    
            var isDustControlInStationParameter = isDustControlInStation.HasValue ?
                new ObjectParameter("IsDustControlInStation", isDustControlInStation) :
                new ObjectParameter("IsDustControlInStation", typeof(bool));
    
            var dustDocParameter = dustDoc != null ?
                new ObjectParameter("DustDoc", dustDoc) :
                new ObjectParameter("DustDoc", typeof(string));
    
            var isRokamSummerParameter = isRokamSummer.HasValue ?
                new ObjectParameter("IsRokamSummer", isRokamSummer) :
                new ObjectParameter("IsRokamSummer", typeof(bool));
    
            var summerDocParameter = summerDoc != null ?
                new ObjectParameter("SummerDoc", summerDoc) :
                new ObjectParameter("SummerDoc", typeof(string));
    
            var isLabEngineerParameter = isLabEngineer.HasValue ?
                new ObjectParameter("IsLabEngineer", isLabEngineer) :
                new ObjectParameter("IsLabEngineer", typeof(bool));
    
            var labDocParameter = labDoc != null ?
                new ObjectParameter("LabDoc", labDoc) :
                new ObjectParameter("LabDoc", typeof(string));
    
            var isMoldanatInTrucksParameter = isMoldanatInTrucks.HasValue ?
                new ObjectParameter("IsMoldanatInTrucks", isMoldanatInTrucks) :
                new ObjectParameter("IsMoldanatInTrucks", typeof(bool));
    
            var truckDocParameter = truckDoc != null ?
                new ObjectParameter("TruckDoc", truckDoc) :
                new ObjectParameter("TruckDoc", typeof(string));
    
            var isPeopleSaftyParameter = isPeopleSafty.HasValue ?
                new ObjectParameter("IsPeopleSafty", isPeopleSafty) :
                new ObjectParameter("IsPeopleSafty", typeof(bool));
    
            var safteyDocParameter = safteyDoc != null ?
                new ObjectParameter("SafteyDoc", safteyDoc) :
                new ObjectParameter("SafteyDoc", typeof(string));
    
            var sampledByParameter = sampledBy.HasValue ?
                new ObjectParameter("SampledBy", sampledBy) :
                new ObjectParameter("SampledBy", typeof(int));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var cleanNoteParameter = cleanNote != null ?
                new ObjectParameter("CleanNote", cleanNote) :
                new ObjectParameter("CleanNote", typeof(string));
    
            var dustNoteParameter = dustNote != null ?
                new ObjectParameter("DustNote", dustNote) :
                new ObjectParameter("DustNote", typeof(string));
    
            var summerNoteParameter = summerNote != null ?
                new ObjectParameter("SummerNote", summerNote) :
                new ObjectParameter("SummerNote", typeof(string));
    
            var labNoteParameter = labNote != null ?
                new ObjectParameter("LabNote", labNote) :
                new ObjectParameter("LabNote", typeof(string));
    
            var truckNoteParameter = truckNote != null ?
                new ObjectParameter("TruckNote", truckNote) :
                new ObjectParameter("TruckNote", typeof(string));
    
            var safteyNoteParameter = safteyNote != null ?
                new ObjectParameter("SafteyNote", safteyNote) :
                new ObjectParameter("SafteyNote", typeof(string));
    
            var otherReasonParameter = otherReason != null ?
                new ObjectParameter("OtherReason", otherReason) :
                new ObjectParameter("OtherReason", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateConcreteSample1", reportNoParameter, reportDateParameter, factoryNameParameter, factoryLocationParameter, mixerNumberParameter, visitNumberParameter, sampleNumberParameter, truckNumberParameter, invoiceNumberParameter, clientNameParameter, visitLocationParameter, latitudeParameter, longitudeParameter, concreteRankParameter, concreteTempertureParameter, waterTemperatureParameter, weatherTempertureParameter, downAmountParameter, cementTypeParameter, cementSourceParameter, additionTypeParameter, additionAmountParameter, cementWeightParameter, waterWieghtParameter, washedSandWeightParameter, whiteSandWeightParameter, rubble3by4Parameter, rubble3by8Parameter, isCleanUsageParameter, isBasicUsageParameter, isColumnUsageParameter, isRoofUsageParameter, isOtherUsageParameter, isCleanLocationParameter, cleanDocParameter, isDustControlInStationParameter, dustDocParameter, isRokamSummerParameter, summerDocParameter, isLabEngineerParameter, labDocParameter, isMoldanatInTrucksParameter, truckDocParameter, isPeopleSaftyParameter, safteyDocParameter, sampledByParameter, createdDateParameter, statusCode, statusMessage, cleanNoteParameter, dustNoteParameter, summerNoteParameter, labNoteParameter, truckNoteParameter, safteyNoteParameter, otherReasonParameter);
        }
    }
}
