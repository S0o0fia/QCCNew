@model AspnetMvcDemo.Models.VisitDetail

@section Styles {
    @Styles.Render("~/bundle/vendor/css/datatables/datatables")
}

@section Scripts {

    @Scripts.Render("~/bundle/vendor/js/datatables/datatables")

    @Scripts.Render("~/bundle/js/tables_datatables")
    <!-- Dependencies -->
    @Scripts.Render("~/bundle/vendor/js/bootbox/bootbox")
    @Scripts.Render("~/bundle/vendor/js/sweetalert2/sweetalert2")

    @Scripts.Render("~/bundle/js/ui_modals")
}


@using Resources
<style type="text/css">
    @@media only screen and (max-width: 760px), (min-device-width: 768px) and (max-device-width: 1024px) {
        @*for new Timer *@
        .base-timer {
  position: relative;
  width: 50%;
  height: 50%;
}

.base-timer__svg {
  transform: scaleX(-1);
}

.base-timer__circle {
  fill: none;
  stroke: none;
}

.base-timer__path-elapsed {
  stroke-width: 5px;
  stroke: grey;
}

.base-timer__path-remaining {
  stroke-width: 5px;
  stroke-linecap: round;
  transform: rotate(90deg);
  transform-origin: center;
  transition: 1s linear all;
  fill-rule: nonzero;
  stroke: currentColor;
}

.base-timer__path-remaining.green {
  color: rgb(65, 184, 131);
}

.base-timer__path-remaining.orange {
  color: orange;
}

.base-timer__path-remaining.red {
  color: red;
}

.base-timer__label {
  position: absolute;
  width: 50%;
  height: 50%;
  top: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: medium;
}
        @*for Rest of the code*@
        button {
            margin-bottom: 5%;
            width: 100%;
            padding: 3% 0 3% 0;
            font-size: 16px;
            vertical-align: middle;
        }

        .tab-pane {
            width: 100%;
        }
        .modal-body , .modal-header
        {
            width:100%
        }
        .modal {
            -ms-transform: translateY(50%);
            transform: translateY(50%);
            justify-content: center;
            justify-items: center;
            justify-self: center;
            align-items: center;
            align-content: center;
            align-self: center;
        }

        .modal-body {
            justify-content: center;
            justify-items: center;
            justify-self: center;
            align-items: center;
            align-content: center;
            align-self: center;
        }

        #shutter {
            font-size: larger;
            text-align: center;
        }
    }

    button {
        width: 70%;
        padding: 3% 0 3% 0;
        font-size: 150%;
        text-align: center
    }

    .modal {
        margin: auto;
        width: 110%;
        top: 70%;
        -ms-transform: translateY(-50%);
        transform: translateY(-50%)
    }

    #shutter {
        font-size: large;
        text-align: center;
    }
    .card{
        padding:5%;
    }

    .btn{
         box-shadow: 2px 2px #888888;
       padding :3%;
    }
  .btn:active {
    transform: translateY(4px);
}

  @*New Timer*@
  
.base-timer {
  position: relative;
  width: 300px;
  height: 300px;
}

.base-timer__svg {
  transform: scaleX(-1);
}

.base-timer__circle {
  fill: none;
  stroke: none;
}

.base-timer__path-elapsed {
  stroke-width: 7px;
  stroke: grey;
}

.base-timer__path-remaining {
  stroke-width: 7px;
  stroke-linecap: round;
  transform: rotate(90deg);
  transform-origin: center;
  transition: 1s linear all;
  fill-rule: nonzero;
  stroke: currentColor;
}

.base-timer__path-remaining.green {
  color: rgb(65, 184, 131);
}

.base-timer__path-remaining.orange {
  color: orange;
}

.base-timer__path-remaining.red {
  color: red;
}

.base-timer__label {
  position: absolute;
  width: 300px;
  height: 300px;
  top: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 48px;
}
</style>
@{ 

}
<body dir="rtl">
<div class="tab-pane fade active show card" style="margin: auto; width:60%; top: 50%; 
-ms-transform: translateY(-50%); transform: translateY(-50%); box-shadow:1px 1px 1px 1px #888888  ;">
    <h3 class="modal-title text-center" id="myModalLabel" style="text-align:right; color: #37474f ;padding-bottom:2%">@Resources.Reason_Of_Cancle_Visit</h3>
    @using (Html.BeginForm("CancleFactoryReport", "ConcreteFactoryReports",new { id= Model.FactoryId , userid = Model.MonitorId}, FormMethod.Post, new { @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
    {
        <form>
            <div class="card-body" >
                <div class="row">
                    <div class="col" style="display: flex; justify-content: center">
                        <input type="submit" class="btn btn-success"  value="@Resources.Factory_close"   onclick="location.href='@Url.Action("ConcreteFactoryReports", "ConcreteFactoryReports", new { id= Model.FactoryId , userid = Model.MonitorId})'"  >
                    </div>
                    <div class="col" style="display:flex;justify-content:center">
                   <input type="button" value="@Resources.Sample_not_ready" id="editVisit" class="edit btn btn-success" data-toggle="modal" data-target="#Cancle_sucess"
                               onClick="take_snapshot()" />

                    </div>
                </div>
            </div>
        </form>
    }
</div>
<div class="modal fade" id="Cancle_sucess" tabindex="-1" role="dialog" aria-labelledby="basicModal" aria-hidden="true"
     style="margin: auto; width:110%; top: 70%; -ms-transform: translateY(-70%); transform: translateY(-70%) ; padding:5%" onclick="close()">
    <div class="modal-dialog modal-lg">
        <div class="modal-content" style="width:60%;  float:left">
            <div class="modal-header">
                @*<button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>*@
                <h3 class="modal-title text-center" id="myModalLabel" style="color:#37474f">@Resources.Sample_not_ready</h3>
            </div>
            <div id="CancleBody" class="modal-body" style="justify-self:center; align-self:center;">
                @using (Html.BeginForm("CancleFactoryReport", "ConcreteFactoryReports", new { id= Model.FactoryId , userid = Model.MonitorId }, FormMethod.Post, new { id = "form2", @class = "form-horizontal", role = "form", enctype = "multipart/form-data" }))
                {
                  <div id="app2"></div>
                }
                <br/>
                <input type="button" style="text-align:center; cursor:pointer; justify-self:center; align-self:center; margin-top:5% ; padding:5%" value="@Resources.Redirect_to_Visit_Report" id="editVisit" class="edit btn btn-twitter" data-toggle="modal" data-target="#Visit-details"
                       onclick="location.href='@Url.Action("ConcreteFactoryReports", "ConcreteFactoryReports", new {id= Model.FactoryId , userid = Model.MonitorId})'" />
            </div>
        </div>
    </div>
</div>
    </body>
<script>

    
    //new Timer 
    // Credit: Mateusz Rybczonec

const FULL_DASH_ARRAY = 283;
const WARNING_THRESHOLD = 10;
const ALERT_THRESHOLD = 5;

const COLOR_CODES = {
  info: {
    color: "green"
  },
  warning: {
    color: "orange",
    threshold: WARNING_THRESHOLD
  },
  alert: {
    color: "red",
    threshold: ALERT_THRESHOLD
  }
};

const TIME_LIMIT = 1800;
let timePassed = 0;
let timeLeft = TIME_LIMIT;
let timerInterval = null;
let remainingPathColor = COLOR_CODES.info.color;

document.getElementById("app2").innerHTML = `
<div class="base-timer">
  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
    <g class="base-timer__circle">
      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
      <path
        id="base-timer-path-remaining"
        stroke-dasharray="283"
        class="base-timer__path-remaining ${remainingPathColor}"
        d="
          M 50, 50
          m -45, 0
          a 45,45 0 1,0 90,0
          a 45,45 0 1,0 -90,0
        "
      ></path>
    </g>
  </svg>
  <span id="base-timer-label" class="base-timer__label">${formatTime(
    timeLeft
  )}</span>
</div>
`;

startTimer();

function onTimesUp() {
  clearInterval(timerInterval);
}

function startTimer() {
  timerInterval = setInterval(() => {
    timePassed = timePassed += 1;
    timeLeft = TIME_LIMIT - timePassed;
    document.getElementById("base-timer-label").innerHTML = formatTime(
      timeLeft
    );
    setCircleDasharray();
    setRemainingPathColor(timeLeft);

    if (timeLeft === 0) {
        onTimesUp();
        document.getElementById("form2").submit();
    }
  }, 1000);
}

function formatTime(time) {
  const minutes = Math.floor(time / 60);
  let seconds = time % 60;

  if (seconds < 10) {
    seconds = `0${seconds}`;
  }

  return `${minutes}:${seconds}`;
}

function setRemainingPathColor(timeLeft) {
  const { alert, warning, info } = COLOR_CODES;
  if (timeLeft <= alert.threshold) {
    document
      .getElementById("base-timer-path-remaining")
      .classList.remove(warning.color);
    document
      .getElementById("base-timer-path-remaining")
      .classList.add(alert.color);
  } else if (timeLeft <= warning.threshold) {
    document
      .getElementById("base-timer-path-remaining")
      .classList.remove(info.color);
    document
      .getElementById("base-timer-path-remaining")
      .classList.add(warning.color);
  }
}

function calculateTimeFraction() {
  const rawTimeFraction = timeLeft / TIME_LIMIT;
  return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
}

function setCircleDasharray() {
  const circleDasharray = `${(
    calculateTimeFraction() * FULL_DASH_ARRAY
  ).toFixed(0)} 283`;
  document
    .getElementById("base-timer-path-remaining")
    .setAttribute("stroke-dasharray", circleDasharray);
}
</script>